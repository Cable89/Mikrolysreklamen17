
Mikrolysreklamen17.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d40  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d0  00802000  00000d40  00000dd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000f63  008020d0  008020d0  00000ea4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ea4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ed4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000f14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000046f8  00000000  00000000  0000105c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002d6d  00000000  00000000  00005754  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000109c  00000000  00000000  000084c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000045c  00000000  00000000  00009560  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000021f1  00000000  00000000  000099bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015e4  00000000  00000000  0000bbad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  0000d191  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
   8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
   c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  10:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  14:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  18:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  1c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  20:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  24:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  28:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  2c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  30:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  34:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  38:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  3c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  40:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  44:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  48:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  4c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  50:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  54:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  58:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  5c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  60:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  64:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  68:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  6c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  70:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  74:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  78:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  7c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  80:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  84:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  88:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  8c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  90:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  94:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  98:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  9c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  a0:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  a4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  a8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  ac:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  b0:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  b4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  b8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  bc:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  c0:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  c4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  c8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  cc:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  d0:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  d4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  d8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  dc:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  e0:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  e4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  e8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  ec:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  f0:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  f4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  f8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
  fc:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 100:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 104:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 108:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 10c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 110:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 114:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 118:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 11c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 120:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 124:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 128:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 12c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 130:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 134:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 138:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 13c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 140:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 144:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 148:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 14c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 150:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 154:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 158:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 15c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 160:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 164:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 168:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 16c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 170:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 174:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 178:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 17c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 180:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 184:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 188:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 18c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 190:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 194:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 198:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 19c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1a0:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1a4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1a8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1ac:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1b0:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1b4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1b8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1bc:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1c0:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1c4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1c8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1cc:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1d0:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1d4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1d8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1dc:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1e0:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1e4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1e8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1ec:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1f0:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1f4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
 1f8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e2       	ldi	r29, 0x2F	; 47
 206:	de bf       	out	0x3e, r29	; 62

00000208 <__do_copy_data>:
 208:	10 e2       	ldi	r17, 0x20	; 32
 20a:	a0 e0       	ldi	r26, 0x00	; 0
 20c:	b0 e2       	ldi	r27, 0x20	; 32
 20e:	e0 e4       	ldi	r30, 0x40	; 64
 210:	fd e0       	ldi	r31, 0x0D	; 13
 212:	00 e0       	ldi	r16, 0x00	; 0
 214:	0b bf       	out	0x3b, r16	; 59
 216:	02 c0       	rjmp	.+4      	; 0x21c <__do_copy_data+0x14>
 218:	07 90       	elpm	r0, Z+
 21a:	0d 92       	st	X+, r0
 21c:	a0 3d       	cpi	r26, 0xD0	; 208
 21e:	b1 07       	cpc	r27, r17
 220:	d9 f7       	brne	.-10     	; 0x218 <__do_copy_data+0x10>

00000222 <__do_clear_bss>:
 222:	20 e3       	ldi	r18, 0x30	; 48
 224:	a0 ed       	ldi	r26, 0xD0	; 208
 226:	b0 e2       	ldi	r27, 0x20	; 32
 228:	01 c0       	rjmp	.+2      	; 0x22c <.do_clear_bss_start>

0000022a <.do_clear_bss_loop>:
 22a:	1d 92       	st	X+, r1

0000022c <.do_clear_bss_start>:
 22c:	a3 33       	cpi	r26, 0x33	; 51
 22e:	b2 07       	cpc	r27, r18
 230:	e1 f7       	brne	.-8      	; 0x22a <.do_clear_bss_loop>
 232:	0e 94 57 04 	call	0x8ae	; 0x8ae <main>
 236:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <_exit>

0000023a <__bad_interrupt>:
 23a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000023e <setupapa>:
		bitbangbonanza(framebuffer[i][BLUE]); // B
		bitbangbonanza(framebuffer[i][GREEN]); // G
		bitbangbonanza(framebuffer[i][RED]); // R
	}
	endframe(NUM_LEDS);
}
 23e:	e0 e6       	ldi	r30, 0x60	; 96
 240:	f6 e0       	ldi	r31, 0x06	; 6
 242:	80 ea       	ldi	r24, 0xA0	; 160
 244:	80 83       	st	Z, r24
 246:	14 82       	std	Z+4, r1	; 0x04
 248:	08 95       	ret

0000024a <bitbangbonanza>:
 24a:	98 2f       	mov	r25, r24
 24c:	99 1f       	adc	r25, r25
 24e:	99 27       	eor	r25, r25
 250:	99 1f       	adc	r25, r25
 252:	92 95       	swap	r25
 254:	99 0f       	add	r25, r25
 256:	90 7e       	andi	r25, 0xE0	; 224
 258:	e0 e6       	ldi	r30, 0x60	; 96
 25a:	f6 e0       	ldi	r31, 0x06	; 6
 25c:	94 83       	std	Z+4, r25	; 0x04
 25e:	94 81       	ldd	r25, Z+4	; 0x04
 260:	90 68       	ori	r25, 0x80	; 128
 262:	94 83       	std	Z+4, r25	; 0x04
 264:	94 81       	ldd	r25, Z+4	; 0x04
 266:	9f 77       	andi	r25, 0x7F	; 127
 268:	94 83       	std	Z+4, r25	; 0x04
 26a:	86 fb       	bst	r24, 6
 26c:	99 27       	eor	r25, r25
 26e:	90 f9       	bld	r25, 0
 270:	92 95       	swap	r25
 272:	99 0f       	add	r25, r25
 274:	90 7e       	andi	r25, 0xE0	; 224
 276:	94 83       	std	Z+4, r25	; 0x04
 278:	94 81       	ldd	r25, Z+4	; 0x04
 27a:	90 68       	ori	r25, 0x80	; 128
 27c:	94 83       	std	Z+4, r25	; 0x04
 27e:	94 81       	ldd	r25, Z+4	; 0x04
 280:	9f 77       	andi	r25, 0x7F	; 127
 282:	94 83       	std	Z+4, r25	; 0x04
 284:	98 2f       	mov	r25, r24
 286:	90 72       	andi	r25, 0x20	; 32
 288:	94 83       	std	Z+4, r25	; 0x04
 28a:	94 81       	ldd	r25, Z+4	; 0x04
 28c:	90 68       	ori	r25, 0x80	; 128
 28e:	94 83       	std	Z+4, r25	; 0x04
 290:	94 81       	ldd	r25, Z+4	; 0x04
 292:	9f 77       	andi	r25, 0x7F	; 127
 294:	94 83       	std	Z+4, r25	; 0x04
 296:	84 fb       	bst	r24, 4
 298:	99 27       	eor	r25, r25
 29a:	90 f9       	bld	r25, 0
 29c:	92 95       	swap	r25
 29e:	99 0f       	add	r25, r25
 2a0:	90 7e       	andi	r25, 0xE0	; 224
 2a2:	94 83       	std	Z+4, r25	; 0x04
 2a4:	94 81       	ldd	r25, Z+4	; 0x04
 2a6:	90 68       	ori	r25, 0x80	; 128
 2a8:	94 83       	std	Z+4, r25	; 0x04
 2aa:	94 81       	ldd	r25, Z+4	; 0x04
 2ac:	9f 77       	andi	r25, 0x7F	; 127
 2ae:	94 83       	std	Z+4, r25	; 0x04
 2b0:	83 fb       	bst	r24, 3
 2b2:	99 27       	eor	r25, r25
 2b4:	90 f9       	bld	r25, 0
 2b6:	92 95       	swap	r25
 2b8:	99 0f       	add	r25, r25
 2ba:	90 7e       	andi	r25, 0xE0	; 224
 2bc:	94 83       	std	Z+4, r25	; 0x04
 2be:	94 81       	ldd	r25, Z+4	; 0x04
 2c0:	90 68       	ori	r25, 0x80	; 128
 2c2:	94 83       	std	Z+4, r25	; 0x04
 2c4:	94 81       	ldd	r25, Z+4	; 0x04
 2c6:	9f 77       	andi	r25, 0x7F	; 127
 2c8:	94 83       	std	Z+4, r25	; 0x04
 2ca:	82 fb       	bst	r24, 2
 2cc:	99 27       	eor	r25, r25
 2ce:	90 f9       	bld	r25, 0
 2d0:	92 95       	swap	r25
 2d2:	99 0f       	add	r25, r25
 2d4:	90 7e       	andi	r25, 0xE0	; 224
 2d6:	94 83       	std	Z+4, r25	; 0x04
 2d8:	94 81       	ldd	r25, Z+4	; 0x04
 2da:	90 68       	ori	r25, 0x80	; 128
 2dc:	94 83       	std	Z+4, r25	; 0x04
 2de:	94 81       	ldd	r25, Z+4	; 0x04
 2e0:	9f 77       	andi	r25, 0x7F	; 127
 2e2:	94 83       	std	Z+4, r25	; 0x04
 2e4:	81 fb       	bst	r24, 1
 2e6:	99 27       	eor	r25, r25
 2e8:	90 f9       	bld	r25, 0
 2ea:	92 95       	swap	r25
 2ec:	99 0f       	add	r25, r25
 2ee:	90 7e       	andi	r25, 0xE0	; 224
 2f0:	94 83       	std	Z+4, r25	; 0x04
 2f2:	94 81       	ldd	r25, Z+4	; 0x04
 2f4:	90 68       	ori	r25, 0x80	; 128
 2f6:	94 83       	std	Z+4, r25	; 0x04
 2f8:	94 81       	ldd	r25, Z+4	; 0x04
 2fa:	9f 77       	andi	r25, 0x7F	; 127
 2fc:	94 83       	std	Z+4, r25	; 0x04
 2fe:	81 70       	andi	r24, 0x01	; 1
 300:	82 95       	swap	r24
 302:	88 0f       	add	r24, r24
 304:	80 7e       	andi	r24, 0xE0	; 224
 306:	84 83       	std	Z+4, r24	; 0x04
 308:	84 81       	ldd	r24, Z+4	; 0x04
 30a:	80 68       	ori	r24, 0x80	; 128
 30c:	84 83       	std	Z+4, r24	; 0x04
 30e:	84 81       	ldd	r24, Z+4	; 0x04
 310:	8f 77       	andi	r24, 0x7F	; 127
 312:	84 83       	std	Z+4, r24	; 0x04
 314:	08 95       	ret

00000316 <startframe>:
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	0e 94 25 01 	call	0x24a	; 0x24a <bitbangbonanza>
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	0e 94 25 01 	call	0x24a	; 0x24a <bitbangbonanza>
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	0e 94 25 01 	call	0x24a	; 0x24a <bitbangbonanza>
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	0e 94 25 01 	call	0x24a	; 0x24a <bitbangbonanza>
 32e:	08 95       	ret

00000330 <endframe>:
 330:	0f 93       	push	r16
 332:	1f 93       	push	r17
 334:	cf 93       	push	r28
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	0e 96       	adiw	r24, 0x0e	; 14
 33a:	8c 01       	movw	r16, r24
 33c:	12 f4       	brpl	.+4      	; 0x342 <endframe+0x12>
 33e:	01 5f       	subi	r16, 0xF1	; 241
 340:	1f 4f       	sbci	r17, 0xFF	; 255
 342:	15 95       	asr	r17
 344:	07 95       	ror	r16
 346:	15 95       	asr	r17
 348:	07 95       	ror	r16
 34a:	15 95       	asr	r17
 34c:	07 95       	ror	r16
 34e:	15 95       	asr	r17
 350:	07 95       	ror	r16
 352:	10 16       	cp	r1, r16
 354:	11 06       	cpc	r1, r17
 356:	54 f4       	brge	.+20     	; 0x36c <endframe+0x3c>
 358:	c0 e0       	ldi	r28, 0x00	; 0
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	0e 94 25 01 	call	0x24a	; 0x24a <bitbangbonanza>
 360:	cf 5f       	subi	r28, 0xFF	; 255
 362:	8c 2f       	mov	r24, r28
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	80 17       	cp	r24, r16
 368:	91 07       	cpc	r25, r17
 36a:	bc f3       	brlt	.-18     	; 0x35a <endframe+0x2a>
 36c:	cf 91       	pop	r28
 36e:	1f 91       	pop	r17
 370:	0f 91       	pop	r16
 372:	08 95       	ret

00000374 <pushframe_global>:

void pushframe_global(uint8_t frame, uint8_t brightness){
 374:	df 92       	push	r13
 376:	ef 92       	push	r14
 378:	ff 92       	push	r15
 37a:	0f 93       	push	r16
 37c:	1f 93       	push	r17
 37e:	cf 93       	push	r28
 380:	df 93       	push	r29
 382:	e8 2e       	mov	r14, r24
 384:	c6 2f       	mov	r28, r22
	startframe();
 386:	0e 94 8b 01 	call	0x316	; 0x316 <startframe>
 38a:	00 e0       	ldi	r16, 0x00	; 0
 38c:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0; i<NUM_LEDS; i++){
		bitbangbonanza(0b11100000 | brightness); // Brightness
 38e:	c0 6e       	ori	r28, 0xE0	; 224
 390:	dc 2e       	mov	r13, r28
		bitbangbonanza(sequenceBuffer[frame][i][BLUE]); // B
 392:	86 ef       	ldi	r24, 0xF6	; 246
 394:	e8 9e       	mul	r14, r24
 396:	70 01       	movw	r14, r0
 398:	11 24       	eor	r1, r1
}

void pushframe_global(uint8_t frame, uint8_t brightness){
	startframe();
	for(uint8_t i=0; i<NUM_LEDS; i++){
		bitbangbonanza(0b11100000 | brightness); // Brightness
 39a:	8d 2d       	mov	r24, r13
 39c:	0e 94 25 01 	call	0x24a	; 0x24a <bitbangbonanza>
		bitbangbonanza(sequenceBuffer[frame][i][BLUE]); // B
 3a0:	e8 01       	movw	r28, r16
 3a2:	cc 0f       	add	r28, r28
 3a4:	dd 1f       	adc	r29, r29
 3a6:	c0 0f       	add	r28, r16
 3a8:	d1 1f       	adc	r29, r17
 3aa:	ce 0d       	add	r28, r14
 3ac:	df 1d       	adc	r29, r15
 3ae:	cf 52       	subi	r28, 0x2F	; 47
 3b0:	df 4d       	sbci	r29, 0xDF	; 223
 3b2:	8a 81       	ldd	r24, Y+2	; 0x02
 3b4:	0e 94 25 01 	call	0x24a	; 0x24a <bitbangbonanza>
		bitbangbonanza(sequenceBuffer[frame][i][GREEN]); // G
 3b8:	89 81       	ldd	r24, Y+1	; 0x01
 3ba:	0e 94 25 01 	call	0x24a	; 0x24a <bitbangbonanza>
		bitbangbonanza(sequenceBuffer[frame][i][RED]); // R
 3be:	88 81       	ld	r24, Y
 3c0:	0e 94 25 01 	call	0x24a	; 0x24a <bitbangbonanza>
 3c4:	0f 5f       	subi	r16, 0xFF	; 255
 3c6:	1f 4f       	sbci	r17, 0xFF	; 255
	endframe(NUM_LEDS);
}

void pushframe_global(uint8_t frame, uint8_t brightness){
	startframe();
	for(uint8_t i=0; i<NUM_LEDS; i++){
 3c8:	02 35       	cpi	r16, 0x52	; 82
 3ca:	11 05       	cpc	r17, r1
 3cc:	31 f7       	brne	.-52     	; 0x39a <pushframe_global+0x26>
		bitbangbonanza(0b11100000 | brightness); // Brightness
		bitbangbonanza(sequenceBuffer[frame][i][BLUE]); // B
		bitbangbonanza(sequenceBuffer[frame][i][GREEN]); // G
		bitbangbonanza(sequenceBuffer[frame][i][RED]); // R
	}
	endframe(NUM_LEDS);
 3ce:	82 e5       	ldi	r24, 0x52	; 82
 3d0:	0e 94 98 01 	call	0x330	; 0x330 <endframe>
 3d4:	df 91       	pop	r29
 3d6:	cf 91       	pop	r28
 3d8:	1f 91       	pop	r17
 3da:	0f 91       	pop	r16
 3dc:	ff 90       	pop	r15
 3de:	ef 90       	pop	r14
 3e0:	df 90       	pop	r13
 3e2:	08 95       	ret

000003e4 <play>:
        g = MAX_PWM*((I/3)*(1-S));
    }
    rgb[0]=r;
    rgb[1]=g;
    rgb[2]=b;
}
 3e4:	cf 93       	push	r28
 3e6:	df 93       	push	r29
 3e8:	61 e0       	ldi	r22, 0x01	; 1
 3ea:	70 e0       	ldi	r23, 0x00	; 0
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	0e 94 ba 01 	call	0x374	; 0x374 <pushframe_global>
 3f4:	c1 e0       	ldi	r28, 0x01	; 1
 3f6:	d0 e0       	ldi	r29, 0x00	; 0
 3f8:	8f e3       	ldi	r24, 0x3F	; 63
 3fa:	9c e9       	ldi	r25, 0x9C	; 156
 3fc:	01 97       	sbiw	r24, 0x01	; 1
 3fe:	f1 f7       	brne	.-4      	; 0x3fc <play+0x18>
 400:	00 c0       	rjmp	.+0      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 402:	00 00       	nop
 404:	61 e0       	ldi	r22, 0x01	; 1
 406:	70 e0       	ldi	r23, 0x00	; 0
 408:	ce 01       	movw	r24, r28
 40a:	0e 94 ba 01 	call	0x374	; 0x374 <pushframe_global>
 40e:	21 96       	adiw	r28, 0x01	; 1
 410:	c0 31       	cpi	r28, 0x10	; 16
 412:	d1 05       	cpc	r29, r1
 414:	89 f7       	brne	.-30     	; 0x3f8 <play+0x14>
 416:	df 91       	pop	r29
 418:	cf 91       	pop	r28
 41a:	08 95       	ret

0000041c <play_frames>:
 41c:	ef 92       	push	r14
 41e:	ff 92       	push	r15
 420:	0f 93       	push	r16
 422:	1f 93       	push	r17
 424:	cf 93       	push	r28
 426:	df 93       	push	r29
 428:	88 23       	and	r24, r24
 42a:	f9 f0       	breq	.+62     	; 0x46a <play_frames+0x4e>
 42c:	ee 24       	eor	r14, r14
 42e:	ea 94       	dec	r14
 430:	e8 0e       	add	r14, r24
 432:	f1 2c       	mov	r15, r1
 434:	9f ef       	ldi	r25, 0xFF	; 255
 436:	e9 1a       	sub	r14, r25
 438:	f9 0a       	sbc	r15, r25
 43a:	c0 e0       	ldi	r28, 0x00	; 0
 43c:	d0 e0       	ldi	r29, 0x00	; 0
 43e:	08 2f       	mov	r16, r24
 440:	10 e0       	ldi	r17, 0x00	; 0
 442:	01 50       	subi	r16, 0x01	; 1
 444:	11 09       	sbc	r17, r1
 446:	61 e0       	ldi	r22, 0x01	; 1
 448:	70 e0       	ldi	r23, 0x00	; 0
 44a:	ce 01       	movw	r24, r28
 44c:	0e 94 ba 01 	call	0x374	; 0x374 <pushframe_global>
 450:	c0 17       	cp	r28, r16
 452:	d1 07       	cpc	r29, r17
 454:	31 f0       	breq	.+12     	; 0x462 <play_frames+0x46>
 456:	8f e3       	ldi	r24, 0x3F	; 63
 458:	9c e9       	ldi	r25, 0x9C	; 156
 45a:	01 97       	sbiw	r24, 0x01	; 1
 45c:	f1 f7       	brne	.-4      	; 0x45a <play_frames+0x3e>
 45e:	00 c0       	rjmp	.+0      	; 0x460 <play_frames+0x44>
 460:	00 00       	nop
 462:	21 96       	adiw	r28, 0x01	; 1
 464:	ce 15       	cp	r28, r14
 466:	df 05       	cpc	r29, r15
 468:	71 f7       	brne	.-36     	; 0x446 <play_frames+0x2a>
 46a:	df 91       	pop	r29
 46c:	cf 91       	pop	r28
 46e:	1f 91       	pop	r17
 470:	0f 91       	pop	r16
 472:	ff 90       	pop	r15
 474:	ef 90       	pop	r14
 476:	08 95       	ret

00000478 <skip>:
 478:	e0 91 31 30 	lds	r30, 0x3031	; 0x803031 <bufferIterator>
 47c:	f0 91 32 30 	lds	r31, 0x3032	; 0x803032 <bufferIterator+0x1>
 480:	90 81       	ld	r25, Z
 482:	89 0f       	add	r24, r25
 484:	80 83       	st	Z, r24
 486:	08 95       	ret

00000488 <next>:
 488:	e0 91 31 30 	lds	r30, 0x3031	; 0x803031 <bufferIterator>
 48c:	f0 91 32 30 	lds	r31, 0x3032	; 0x803032 <bufferIterator+0x1>
 490:	80 81       	ld	r24, Z
 492:	8f 5f       	subi	r24, 0xFF	; 255
 494:	80 83       	st	Z, r24
 496:	08 95       	ret

00000498 <api_fill_frame>:
 498:	db 01       	movw	r26, r22
 49a:	20 e0       	ldi	r18, 0x00	; 0
 49c:	30 e0       	ldi	r19, 0x00	; 0
 49e:	96 ef       	ldi	r25, 0xF6	; 246
 4a0:	89 9f       	mul	r24, r25
 4a2:	a0 01       	movw	r20, r0
 4a4:	11 24       	eor	r1, r1
 4a6:	9c 91       	ld	r25, X
 4a8:	f9 01       	movw	r30, r18
 4aa:	ee 0f       	add	r30, r30
 4ac:	ff 1f       	adc	r31, r31
 4ae:	e2 0f       	add	r30, r18
 4b0:	f3 1f       	adc	r31, r19
 4b2:	e4 0f       	add	r30, r20
 4b4:	f5 1f       	adc	r31, r21
 4b6:	ef 52       	subi	r30, 0x2F	; 47
 4b8:	ff 4d       	sbci	r31, 0xDF	; 223
 4ba:	90 83       	st	Z, r25
 4bc:	11 96       	adiw	r26, 0x01	; 1
 4be:	9c 91       	ld	r25, X
 4c0:	11 97       	sbiw	r26, 0x01	; 1
 4c2:	91 83       	std	Z+1, r25	; 0x01
 4c4:	12 96       	adiw	r26, 0x02	; 2
 4c6:	9c 91       	ld	r25, X
 4c8:	12 97       	sbiw	r26, 0x02	; 2
 4ca:	92 83       	std	Z+2, r25	; 0x02
 4cc:	2f 5f       	subi	r18, 0xFF	; 255
 4ce:	3f 4f       	sbci	r19, 0xFF	; 255
 4d0:	22 35       	cpi	r18, 0x52	; 82
 4d2:	31 05       	cpc	r19, r1
 4d4:	41 f7       	brne	.-48     	; 0x4a6 <api_fill_frame+0xe>
 4d6:	08 95       	ret

000004d8 <api_fill>:
 4d8:	0f 93       	push	r16
 4da:	1f 93       	push	r17
 4dc:	cf 93       	push	r28
 4de:	8c 01       	movw	r16, r24
 4e0:	c0 e0       	ldi	r28, 0x00	; 0
 4e2:	b8 01       	movw	r22, r16
 4e4:	8c 2f       	mov	r24, r28
 4e6:	0e 94 4c 02 	call	0x498	; 0x498 <api_fill_frame>
 4ea:	cf 5f       	subi	r28, 0xFF	; 255
 4ec:	c0 31       	cpi	r28, 0x10	; 16
 4ee:	c9 f7       	brne	.-14     	; 0x4e2 <api_fill+0xa>
 4f0:	cf 91       	pop	r28
 4f2:	1f 91       	pop	r17
 4f4:	0f 91       	pop	r16
 4f6:	08 95       	ret

000004f8 <bulb_setRGB>:

void bulb_setRGB(uint8_t bulb, uint8_t color_red, uint8_t color_green, uint8_t color_blue){
 4f8:	cf 93       	push	r28
 4fa:	df 93       	push	r29
 4fc:	1f 92       	push	r1
 4fe:	cd b7       	in	r28, 0x3d	; 61
 500:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t bulbdebug = bulb;
 502:	89 83       	std	Y+1, r24	; 0x01
	sequenceBuffer[*bufferIterator][bulbdebug][RED]   = color_red;
 504:	a0 91 31 30 	lds	r26, 0x3031	; 0x803031 <bufferIterator>
 508:	b0 91 32 30 	lds	r27, 0x3032	; 0x803032 <bufferIterator+0x1>
 50c:	5c 91       	ld	r21, X
 50e:	89 81       	ldd	r24, Y+1	; 0x01
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	fc 01       	movw	r30, r24
 514:	ee 0f       	add	r30, r30
 516:	ff 1f       	adc	r31, r31
 518:	e8 0f       	add	r30, r24
 51a:	f9 1f       	adc	r31, r25
 51c:	36 ef       	ldi	r19, 0xF6	; 246
 51e:	35 9f       	mul	r19, r21
 520:	e0 0d       	add	r30, r0
 522:	f1 1d       	adc	r31, r1
 524:	11 24       	eor	r1, r1
 526:	ef 52       	subi	r30, 0x2F	; 47
 528:	ff 4d       	sbci	r31, 0xDF	; 223
 52a:	60 83       	st	Z, r22
	sequenceBuffer[*bufferIterator][bulbdebug][GREEN] = color_green;
 52c:	5c 91       	ld	r21, X
 52e:	89 81       	ldd	r24, Y+1	; 0x01
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	fc 01       	movw	r30, r24
 534:	ee 0f       	add	r30, r30
 536:	ff 1f       	adc	r31, r31
 538:	e8 0f       	add	r30, r24
 53a:	f9 1f       	adc	r31, r25
 53c:	35 9f       	mul	r19, r21
 53e:	e0 0d       	add	r30, r0
 540:	f1 1d       	adc	r31, r1
 542:	11 24       	eor	r1, r1
 544:	ef 52       	subi	r30, 0x2F	; 47
 546:	ff 4d       	sbci	r31, 0xDF	; 223
 548:	41 83       	std	Z+1, r20	; 0x01
	sequenceBuffer[*bufferIterator][bulbdebug][BLUE]  = color_blue;
 54a:	4c 91       	ld	r20, X
 54c:	89 81       	ldd	r24, Y+1	; 0x01
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	fc 01       	movw	r30, r24
 552:	ee 0f       	add	r30, r30
 554:	ff 1f       	adc	r31, r31
 556:	e8 0f       	add	r30, r24
 558:	f9 1f       	adc	r31, r25
 55a:	34 9f       	mul	r19, r20
 55c:	e0 0d       	add	r30, r0
 55e:	f1 1d       	adc	r31, r1
 560:	11 24       	eor	r1, r1
 562:	ef 52       	subi	r30, 0x2F	; 47
 564:	ff 4d       	sbci	r31, 0xDF	; 223
 566:	22 83       	std	Z+2, r18	; 0x02
 568:	0f 90       	pop	r0
 56a:	df 91       	pop	r29
 56c:	cf 91       	pop	r28
 56e:	08 95       	ret

00000570 <effect_RGBFade>:
		}
		skip(fade);
	}
}

void effect_RGBFade(uint8_t bulb, uint8_t endColor[3], uint8_t frames) {
 570:	bf 92       	push	r11
 572:	cf 92       	push	r12
 574:	df 92       	push	r13
 576:	ef 92       	push	r14
 578:	ff 92       	push	r15
 57a:	0f 93       	push	r16
 57c:	1f 93       	push	r17
 57e:	cf 93       	push	r28
 580:	df 93       	push	r29
 582:	00 d0       	rcall	.+0      	; 0x584 <effect_RGBFade+0x14>
 584:	1f 92       	push	r1
 586:	cd b7       	in	r28, 0x3d	; 61
 588:	de b7       	in	r29, 0x3e	; 62
 58a:	f8 2e       	mov	r15, r24
 58c:	9b 01       	movw	r18, r22
	uint8_t bufferIterator_start = *bufferIterator;
 58e:	e0 91 31 30 	lds	r30, 0x3031	; 0x803031 <bufferIterator>
 592:	f0 91 32 30 	lds	r31, 0x3032	; 0x803032 <bufferIterator+0x1>
 596:	b0 80       	ld	r11, Z
	uint8_t startColor[3] = {sequenceBuffer[*bufferIterator][bulb][BLUE],
 598:	60 81       	ld	r22, Z
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	dc 01       	movw	r26, r24
 59e:	aa 0f       	add	r26, r26
 5a0:	bb 1f       	adc	r27, r27
 5a2:	8a 0f       	add	r24, r26
 5a4:	9b 1f       	adc	r25, r27
 5a6:	56 ef       	ldi	r21, 0xF6	; 246
 5a8:	dc 01       	movw	r26, r24
 5aa:	56 9f       	mul	r21, r22
 5ac:	a0 0d       	add	r26, r0
 5ae:	b1 1d       	adc	r27, r1
 5b0:	11 24       	eor	r1, r1
 5b2:	af 52       	subi	r26, 0x2F	; 47
 5b4:	bf 4d       	sbci	r27, 0xDF	; 223
 5b6:	12 96       	adiw	r26, 0x02	; 2
 5b8:	ec 90       	ld	r14, X
							 sequenceBuffer[*bufferIterator][bulb][GREEN],
 5ba:	60 81       	ld	r22, Z
 5bc:	dc 01       	movw	r26, r24
 5be:	56 9f       	mul	r21, r22
 5c0:	a0 0d       	add	r26, r0
 5c2:	b1 1d       	adc	r27, r1
 5c4:	11 24       	eor	r1, r1
 5c6:	af 52       	subi	r26, 0x2F	; 47
 5c8:	bf 4d       	sbci	r27, 0xDF	; 223
 5ca:	11 96       	adiw	r26, 0x01	; 1
 5cc:	dc 90       	ld	r13, X
							 sequenceBuffer[*bufferIterator][bulb][RED]};
 5ce:	60 81       	ld	r22, Z
 5d0:	56 9f       	mul	r21, r22
 5d2:	80 0d       	add	r24, r0
 5d4:	91 1d       	adc	r25, r1
 5d6:	11 24       	eor	r1, r1
 5d8:	fc 01       	movw	r30, r24
 5da:	ef 52       	subi	r30, 0x2F	; 47
 5dc:	ff 4d       	sbci	r31, 0xDF	; 223
 5de:	c0 80       	ld	r12, Z
	volatile uint8_t delta_r, delta_g, delta_b;
	
	if (endColor[RED] > startColor[RED]) {
 5e0:	f9 01       	movw	r30, r18
 5e2:	80 81       	ld	r24, Z
 5e4:	e8 16       	cp	r14, r24
 5e6:	48 f4       	brcc	.+18     	; 0x5fa <effect_RGBFade+0x8a>
		delta_r = (endColor[RED]   - startColor[RED])   / frames;
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	8e 19       	sub	r24, r14
 5ec:	91 09       	sbc	r25, r1
 5ee:	64 2f       	mov	r22, r20
 5f0:	70 e0       	ldi	r23, 0x00	; 0
 5f2:	0e 94 b9 05 	call	0xb72	; 0xb72 <__divmodhi4>
 5f6:	69 83       	std	Y+1, r22	; 0x01
 5f8:	01 c0       	rjmp	.+2      	; 0x5fc <effect_RGBFade+0x8c>
	} else {
		delta_r = 0;
 5fa:	19 82       	std	Y+1, r1	; 0x01
	}
	if (endColor[GREEN] > startColor[GREEN]) {
 5fc:	f9 01       	movw	r30, r18
 5fe:	81 81       	ldd	r24, Z+1	; 0x01
 600:	d8 16       	cp	r13, r24
 602:	48 f4       	brcc	.+18     	; 0x616 <effect_RGBFade+0xa6>
		delta_g = (endColor[GREEN] - startColor[GREEN]) / frames;
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	8d 19       	sub	r24, r13
 608:	91 09       	sbc	r25, r1
 60a:	64 2f       	mov	r22, r20
 60c:	70 e0       	ldi	r23, 0x00	; 0
 60e:	0e 94 b9 05 	call	0xb72	; 0xb72 <__divmodhi4>
 612:	6a 83       	std	Y+2, r22	; 0x02
 614:	01 c0       	rjmp	.+2      	; 0x618 <effect_RGBFade+0xa8>
		} else {
		delta_g = 0;
 616:	1a 82       	std	Y+2, r1	; 0x02
	}
	if (endColor[BLUE] > startColor[BLUE]) {
 618:	f9 01       	movw	r30, r18
 61a:	82 81       	ldd	r24, Z+2	; 0x02
 61c:	c8 16       	cp	r12, r24
 61e:	48 f4       	brcc	.+18     	; 0x632 <effect_RGBFade+0xc2>
		delta_b = (endColor[BLUE]  - startColor[BLUE])  / frames;
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	8c 19       	sub	r24, r12
 624:	91 09       	sbc	r25, r1
 626:	64 2f       	mov	r22, r20
 628:	70 e0       	ldi	r23, 0x00	; 0
 62a:	0e 94 b9 05 	call	0xb72	; 0xb72 <__divmodhi4>
 62e:	6b 83       	std	Y+3, r22	; 0x03
 630:	01 c0       	rjmp	.+2      	; 0x634 <effect_RGBFade+0xc4>
		} else {
		delta_b = 0;
 632:	1b 82       	std	Y+3, r1	; 0x03
	}

	for(uint8_t frame = 1; frame <= frames; frame++) { // && !isCancelled()
 634:	44 23       	and	r20, r20
 636:	d1 f0       	breq	.+52     	; 0x66c <effect_RGBFade+0xfc>
 638:	04 2f       	mov	r16, r20
 63a:	11 e0       	ldi	r17, 0x01	; 1
		uint8_t red   = (startColor[RED]   + (uint8_t)(delta_r*frame));
 63c:	99 81       	ldd	r25, Y+1	; 0x01
		uint8_t green = (startColor[GREEN] + (uint8_t)(delta_g*frame));
 63e:	3a 81       	ldd	r19, Y+2	; 0x02
		uint8_t blue  = (startColor[BLUE]  + (uint8_t)(delta_b*frame));
 640:	2b 81       	ldd	r18, Y+3	; 0x03

		bulb_setRGB(bulb, red, green, blue);
 642:	fc 2d       	mov	r31, r12
 644:	21 9f       	mul	r18, r17
 646:	f0 0d       	add	r31, r0
 648:	11 24       	eor	r1, r1
 64a:	2f 2f       	mov	r18, r31
 64c:	4d 2d       	mov	r20, r13
 64e:	31 9f       	mul	r19, r17
 650:	40 0d       	add	r20, r0
 652:	11 24       	eor	r1, r1
 654:	6e 2d       	mov	r22, r14
 656:	91 9f       	mul	r25, r17
 658:	60 0d       	add	r22, r0
 65a:	11 24       	eor	r1, r1
 65c:	8f 2d       	mov	r24, r15
 65e:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <bulb_setRGB>
		next();
 662:	0e 94 44 02 	call	0x488	; 0x488 <next>
		delta_b = (endColor[BLUE]  - startColor[BLUE])  / frames;
		} else {
		delta_b = 0;
	}

	for(uint8_t frame = 1; frame <= frames; frame++) { // && !isCancelled()
 666:	1f 5f       	subi	r17, 0xFF	; 255
 668:	01 17       	cp	r16, r17
 66a:	40 f7       	brcc	.-48     	; 0x63c <effect_RGBFade+0xcc>
		uint8_t blue  = (startColor[BLUE]  + (uint8_t)(delta_b*frame));

		bulb_setRGB(bulb, red, green, blue);
		next();
	}
	*bufferIterator = bufferIterator_start;
 66c:	e0 91 31 30 	lds	r30, 0x3031	; 0x803031 <bufferIterator>
 670:	f0 91 32 30 	lds	r31, 0x3032	; 0x803032 <bufferIterator+0x1>
 674:	b0 82       	st	Z, r11
}
 676:	23 96       	adiw	r28, 0x03	; 3
 678:	cd bf       	out	0x3d, r28	; 61
 67a:	de bf       	out	0x3e, r29	; 62
 67c:	df 91       	pop	r29
 67e:	cf 91       	pop	r28
 680:	1f 91       	pop	r17
 682:	0f 91       	pop	r16
 684:	ff 90       	pop	r15
 686:	ef 90       	pop	r14
 688:	df 90       	pop	r13
 68a:	cf 90       	pop	r12
 68c:	bf 90       	pop	r11
 68e:	08 95       	ret

00000690 <effect_aurora>:
#include <stdlib.h>
#include "Mikrolysreklamen.h"
#include "api.h"
#include "effects.h"

void effect_aurora(uint8_t* bulbGroup, uint8_t color[3], uint8_t time, uint8_t fade, uint8_t nChangeBulbs, uint8_t minBrightness) {
 690:	2f 92       	push	r2
 692:	3f 92       	push	r3
 694:	4f 92       	push	r4
 696:	5f 92       	push	r5
 698:	6f 92       	push	r6
 69a:	7f 92       	push	r7
 69c:	8f 92       	push	r8
 69e:	9f 92       	push	r9
 6a0:	af 92       	push	r10
 6a2:	bf 92       	push	r11
 6a4:	cf 92       	push	r12
 6a6:	df 92       	push	r13
 6a8:	ef 92       	push	r14
 6aa:	ff 92       	push	r15
 6ac:	0f 93       	push	r16
 6ae:	1f 93       	push	r17
 6b0:	cf 93       	push	r28
 6b2:	df 93       	push	r29
 6b4:	cd b7       	in	r28, 0x3d	; 61
 6b6:	de b7       	in	r29, 0x3e	; 62
 6b8:	26 97       	sbiw	r28, 0x06	; 6
 6ba:	cd bf       	out	0x3d, r28	; 61
 6bc:	de bf       	out	0x3e, r29	; 62
 6be:	fc 01       	movw	r30, r24
 6c0:	1b 01       	movw	r2, r22
 6c2:	84 2f       	mov	r24, r20
	// uint8_t time;
	// uint8_t fade;
	// uint8_t nChangeBulbs;
	// uint8_t minBrightness;
	
	uint8_t nRepeats = (uint8_t)( time / fade );
 6c4:	62 2f       	mov	r22, r18
 6c6:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__udivmodqi4>
	uint8_t numBulbs = bulbGroup[0];
 6ca:	90 81       	ld	r25, Z
	
	for (uint8_t j = 0; j < nRepeats; j++) {
 6cc:	81 11       	cpse	r24, r1
 6ce:	3d c0       	rjmp	.+122    	; 0x74a <effect_aurora+0xba>
 6d0:	56 c0       	rjmp	.+172    	; 0x77e <effect_aurora+0xee>
		for (uint8_t i = 0; i < nChangeBulbs; i++) {
 6d2:	e1 2c       	mov	r14, r1
			uint8_t nextBulbIdx = (rand() % numBulbs) + 1;
 6d4:	0e 94 2c 06 	call	0xc58	; 0xc58 <rand>
			uint8_t nextBulb = bulbGroup[nextBulbIdx];
 6d8:	6c 81       	ldd	r22, Y+4	; 0x04
 6da:	7d 81       	ldd	r23, Y+5	; 0x05
 6dc:	0e 94 b9 05 	call	0xb72	; 0xb72 <__divmodhi4>
 6e0:	8f 5f       	subi	r24, 0xFF	; 255
 6e2:	f5 01       	movw	r30, r10
 6e4:	e8 0f       	add	r30, r24
 6e6:	f1 1d       	adc	r31, r1
 6e8:	70 80       	ld	r7, Z
			uint8_t nextBrightness = rand() % 255;
 6ea:	0e 94 2c 06 	call	0xc58	; 0xc58 <rand>
 6ee:	b8 01       	movw	r22, r16
 6f0:	0e 94 b9 05 	call	0xb72	; 0xb72 <__divmodhi4>
			uint8_t colorbuffer[3];
			while (nextBrightness <= minBrightness) {
 6f4:	f8 16       	cp	r15, r24
 6f6:	e0 f1       	brcs	.+120    	; 0x770 <effect_aurora+0xe0>
				nextBrightness = rand() % 255;
 6f8:	0e 94 2c 06 	call	0xc58	; 0xc58 <rand>
 6fc:	b8 01       	movw	r22, r16
 6fe:	0e 94 b9 05 	call	0xb72	; 0xb72 <__divmodhi4>
		for (uint8_t i = 0; i < nChangeBulbs; i++) {
			uint8_t nextBulbIdx = (rand() % numBulbs) + 1;
			uint8_t nextBulb = bulbGroup[nextBulbIdx];
			uint8_t nextBrightness = rand() % 255;
			uint8_t colorbuffer[3];
			while (nextBrightness <= minBrightness) {
 702:	f8 16       	cp	r15, r24
 704:	c8 f7       	brcc	.-14     	; 0x6f8 <effect_aurora+0x68>
 706:	34 c0       	rjmp	.+104    	; 0x770 <effect_aurora+0xe0>
				nextBrightness = rand() % 255;
			}
			for(uint8_t k=0; k<3; k++){
				colorbuffer[k] = (color[k]*nextBrightness) / 255; // TBD do proper HSI brightness adjustment
 708:	41 91       	ld	r20, Z+
 70a:	42 9f       	mul	r20, r18
 70c:	c0 01       	movw	r24, r0
 70e:	43 9f       	mul	r20, r19
 710:	90 0d       	add	r25, r0
 712:	11 24       	eor	r1, r1
 714:	b8 01       	movw	r22, r16
 716:	0e 94 b9 05 	call	0xb72	; 0xb72 <__divmodhi4>
 71a:	d4 01       	movw	r26, r8
 71c:	6d 93       	st	X+, r22
 71e:	4d 01       	movw	r8, r26
			uint8_t nextBrightness = rand() % 255;
			uint8_t colorbuffer[3];
			while (nextBrightness <= minBrightness) {
				nextBrightness = rand() % 255;
			}
			for(uint8_t k=0; k<3; k++){
 720:	ec 15       	cp	r30, r12
 722:	fd 05       	cpc	r31, r13
 724:	89 f7       	brne	.-30     	; 0x708 <effect_aurora+0x78>
				colorbuffer[k] = (color[k]*nextBrightness) / 255; // TBD do proper HSI brightness adjustment
			}
			effect_RGBFade(nextBulb, colorbuffer, fade);
 726:	45 2d       	mov	r20, r5
 728:	be 01       	movw	r22, r28
 72a:	6f 5f       	subi	r22, 0xFF	; 255
 72c:	7f 4f       	sbci	r23, 0xFF	; 255
 72e:	87 2d       	mov	r24, r7
 730:	0e 94 b8 02 	call	0x570	; 0x570 <effect_RGBFade>
	
	uint8_t nRepeats = (uint8_t)( time / fade );
	uint8_t numBulbs = bulbGroup[0];
	
	for (uint8_t j = 0; j < nRepeats; j++) {
		for (uint8_t i = 0; i < nChangeBulbs; i++) {
 734:	e3 94       	inc	r14
 736:	6e 10       	cpse	r6, r14
 738:	cd cf       	rjmp	.-102    	; 0x6d4 <effect_aurora+0x44>
			for(uint8_t k=0; k<3; k++){
				colorbuffer[k] = (color[k]*nextBrightness) / 255; // TBD do proper HSI brightness adjustment
			}
			effect_RGBFade(nextBulb, colorbuffer, fade);
		}
		skip(fade);
 73a:	85 2d       	mov	r24, r5
 73c:	0e 94 3c 02 	call	0x478	; 0x478 <skip>
	// uint8_t minBrightness;
	
	uint8_t nRepeats = (uint8_t)( time / fade );
	uint8_t numBulbs = bulbGroup[0];
	
	for (uint8_t j = 0; j < nRepeats; j++) {
 740:	43 94       	inc	r4
 742:	be 81       	ldd	r27, Y+6	; 0x06
 744:	b4 11       	cpse	r27, r4
 746:	11 c0       	rjmp	.+34     	; 0x76a <effect_aurora+0xda>
 748:	1a c0       	rjmp	.+52     	; 0x77e <effect_aurora+0xee>
 74a:	8e 83       	std	Y+6, r24	; 0x06
 74c:	fe 2c       	mov	r15, r14
 74e:	60 2e       	mov	r6, r16
 750:	52 2e       	mov	r5, r18
 752:	5f 01       	movw	r10, r30
 754:	41 2c       	mov	r4, r1
		for (uint8_t i = 0; i < nChangeBulbs; i++) {
			uint8_t nextBulbIdx = (rand() % numBulbs) + 1;
			uint8_t nextBulb = bulbGroup[nextBulbIdx];
 756:	29 2f       	mov	r18, r25
 758:	30 e0       	ldi	r19, 0x00	; 0
 75a:	2c 83       	std	Y+4, r18	; 0x04
 75c:	3d 83       	std	Y+5, r19	; 0x05
			uint8_t nextBrightness = rand() % 255;
 75e:	0f ef       	ldi	r16, 0xFF	; 255
 760:	10 e0       	ldi	r17, 0x00	; 0
 762:	61 01       	movw	r12, r2
 764:	33 e0       	ldi	r19, 0x03	; 3
 766:	c3 0e       	add	r12, r19
 768:	d1 1c       	adc	r13, r1
	
	uint8_t nRepeats = (uint8_t)( time / fade );
	uint8_t numBulbs = bulbGroup[0];
	
	for (uint8_t j = 0; j < nRepeats; j++) {
		for (uint8_t i = 0; i < nChangeBulbs; i++) {
 76a:	61 10       	cpse	r6, r1
 76c:	b2 cf       	rjmp	.-156    	; 0x6d2 <effect_aurora+0x42>
 76e:	e5 cf       	rjmp	.-54     	; 0x73a <effect_aurora+0xaa>
 770:	f1 01       	movw	r30, r2
 772:	de 01       	movw	r26, r28
 774:	11 96       	adiw	r26, 0x01	; 1
 776:	4d 01       	movw	r8, r26
			uint8_t colorbuffer[3];
			while (nextBrightness <= minBrightness) {
				nextBrightness = rand() % 255;
			}
			for(uint8_t k=0; k<3; k++){
				colorbuffer[k] = (color[k]*nextBrightness) / 255; // TBD do proper HSI brightness adjustment
 778:	28 2f       	mov	r18, r24
 77a:	30 e0       	ldi	r19, 0x00	; 0
 77c:	c5 cf       	rjmp	.-118    	; 0x708 <effect_aurora+0x78>
			}
			effect_RGBFade(nextBulb, colorbuffer, fade);
		}
		skip(fade);
	}
}
 77e:	26 96       	adiw	r28, 0x06	; 6
 780:	cd bf       	out	0x3d, r28	; 61
 782:	de bf       	out	0x3e, r29	; 62
 784:	df 91       	pop	r29
 786:	cf 91       	pop	r28
 788:	1f 91       	pop	r17
 78a:	0f 91       	pop	r16
 78c:	ff 90       	pop	r15
 78e:	ef 90       	pop	r14
 790:	df 90       	pop	r13
 792:	cf 90       	pop	r12
 794:	bf 90       	pop	r11
 796:	af 90       	pop	r10
 798:	9f 90       	pop	r9
 79a:	8f 90       	pop	r8
 79c:	7f 90       	pop	r7
 79e:	6f 90       	pop	r6
 7a0:	5f 90       	pop	r5
 7a2:	4f 90       	pop	r4
 7a4:	3f 90       	pop	r3
 7a6:	2f 90       	pop	r2
 7a8:	08 95       	ret

000007aa <effect_fill_group>:
		next();
	}
	*bufferIterator = bufferIterator_start;
}

void effect_fill_group(uint8_t* bulbGroup, uint8_t *color, uint8_t frames){
 7aa:	6f 92       	push	r6
 7ac:	7f 92       	push	r7
 7ae:	8f 92       	push	r8
 7b0:	9f 92       	push	r9
 7b2:	af 92       	push	r10
 7b4:	bf 92       	push	r11
 7b6:	cf 92       	push	r12
 7b8:	df 92       	push	r13
 7ba:	ef 92       	push	r14
 7bc:	ff 92       	push	r15
 7be:	0f 93       	push	r16
 7c0:	1f 93       	push	r17
 7c2:	cf 93       	push	r28
 7c4:	df 93       	push	r29
	uint8_t numBulbs = bulbGroup[0];
 7c6:	dc 01       	movw	r26, r24
 7c8:	2c 91       	ld	r18, X
	
	for(uint8_t j=0; j<numBulbs; j++){
 7ca:	22 23       	and	r18, r18
 7cc:	09 f4       	brne	.+2      	; 0x7d0 <effect_fill_group+0x26>
 7ce:	50 c0       	rjmp	.+160    	; 0x870 <effect_fill_group+0xc6>
 7d0:	64 2e       	mov	r6, r20
 7d2:	c7 2e       	mov	r12, r23
 7d4:	d6 2e       	mov	r13, r22
 7d6:	7c 01       	movw	r14, r24
 7d8:	21 50       	subi	r18, 0x01	; 1
 7da:	30 e0       	ldi	r19, 0x00	; 0
 7dc:	2f 5f       	subi	r18, 0xFF	; 255
 7de:	3f 4f       	sbci	r19, 0xFF	; 255
 7e0:	4c 01       	movw	r8, r24
 7e2:	82 0e       	add	r8, r18
 7e4:	93 1e       	adc	r9, r19
 7e6:	0f ef       	ldi	r16, 0xFF	; 255
 7e8:	04 0f       	add	r16, r20
 7ea:	10 e0       	ldi	r17, 0x00	; 0
 7ec:	0f 5f       	subi	r16, 0xFF	; 255
 7ee:	1f 4f       	sbci	r17, 0xFF	; 255
		uint8_t bufferIterator_start = *bufferIterator;
		for (uint8_t frame=0; frame<frames; frame++){
			for(uint8_t i=0; i<3; i++){
				sequenceBuffer[frame][bulbGroup[j+1]][i] = color[i];
 7f0:	0f 2e       	mov	r0, r31
 7f2:	f6 ef       	ldi	r31, 0xF6	; 246
 7f4:	bf 2e       	mov	r11, r31
 7f6:	f0 2d       	mov	r31, r0

void effect_fill_group(uint8_t* bulbGroup, uint8_t *color, uint8_t frames){
	uint8_t numBulbs = bulbGroup[0];
	
	for(uint8_t j=0; j<numBulbs; j++){
		uint8_t bufferIterator_start = *bufferIterator;
 7f8:	e0 91 31 30 	lds	r30, 0x3031	; 0x803031 <bufferIterator>
 7fc:	f0 91 32 30 	lds	r31, 0x3032	; 0x803032 <bufferIterator+0x1>
 800:	70 80       	ld	r7, Z
		for (uint8_t frame=0; frame<frames; frame++){
 802:	66 20       	and	r6, r6
 804:	51 f1       	breq	.+84     	; 0x85a <effect_fill_group+0xb0>
 806:	c0 e0       	ldi	r28, 0x00	; 0
 808:	d0 e0       	ldi	r29, 0x00	; 0
 80a:	1d c0       	rjmp	.+58     	; 0x846 <effect_fill_group+0x9c>
			for(uint8_t i=0; i<3; i++){
				sequenceBuffer[frame][bulbGroup[j+1]][i] = color[i];
 80c:	d7 01       	movw	r26, r14
 80e:	11 96       	adiw	r26, 0x01	; 1
 810:	8c 91       	ld	r24, X
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	a1 90       	ld	r10, Z+
 816:	ac 01       	movw	r20, r24
 818:	44 0f       	add	r20, r20
 81a:	55 1f       	adc	r21, r21
 81c:	da 01       	movw	r26, r20
 81e:	a8 0f       	add	r26, r24
 820:	b9 1f       	adc	r27, r25
 822:	a6 0f       	add	r26, r22
 824:	b7 1f       	adc	r27, r23
 826:	af 52       	subi	r26, 0x2F	; 47
 828:	bf 4d       	sbci	r27, 0xDF	; 223
 82a:	a2 0f       	add	r26, r18
 82c:	b3 1f       	adc	r27, r19
 82e:	ac 92       	st	X, r10
 830:	2f 5f       	subi	r18, 0xFF	; 255
 832:	3f 4f       	sbci	r19, 0xFF	; 255
	uint8_t numBulbs = bulbGroup[0];
	
	for(uint8_t j=0; j<numBulbs; j++){
		uint8_t bufferIterator_start = *bufferIterator;
		for (uint8_t frame=0; frame<frames; frame++){
			for(uint8_t i=0; i<3; i++){
 834:	23 30       	cpi	r18, 0x03	; 3
 836:	31 05       	cpc	r19, r1
 838:	49 f7       	brne	.-46     	; 0x80c <effect_fill_group+0x62>
				sequenceBuffer[frame][bulbGroup[j+1]][i] = color[i];
			}
			next();
 83a:	0e 94 44 02 	call	0x488	; 0x488 <next>
 83e:	21 96       	adiw	r28, 0x01	; 1
void effect_fill_group(uint8_t* bulbGroup, uint8_t *color, uint8_t frames){
	uint8_t numBulbs = bulbGroup[0];
	
	for(uint8_t j=0; j<numBulbs; j++){
		uint8_t bufferIterator_start = *bufferIterator;
		for (uint8_t frame=0; frame<frames; frame++){
 840:	c0 17       	cp	r28, r16
 842:	d1 07       	cpc	r29, r17
 844:	51 f0       	breq	.+20     	; 0x85a <effect_fill_group+0xb0>
 846:	ed 2d       	mov	r30, r13
 848:	fc 2d       	mov	r31, r12
		next();
	}
	*bufferIterator = bufferIterator_start;
}

void effect_fill_group(uint8_t* bulbGroup, uint8_t *color, uint8_t frames){
 84a:	20 e0       	ldi	r18, 0x00	; 0
 84c:	30 e0       	ldi	r19, 0x00	; 0
	
	for(uint8_t j=0; j<numBulbs; j++){
		uint8_t bufferIterator_start = *bufferIterator;
		for (uint8_t frame=0; frame<frames; frame++){
			for(uint8_t i=0; i<3; i++){
				sequenceBuffer[frame][bulbGroup[j+1]][i] = color[i];
 84e:	bc 9e       	mul	r11, r28
 850:	b0 01       	movw	r22, r0
 852:	bd 9e       	mul	r11, r29
 854:	70 0d       	add	r23, r0
 856:	11 24       	eor	r1, r1
 858:	d9 cf       	rjmp	.-78     	; 0x80c <effect_fill_group+0x62>
			}
			next();
		}
		*bufferIterator = bufferIterator_start;
 85a:	e0 91 31 30 	lds	r30, 0x3031	; 0x803031 <bufferIterator>
 85e:	f0 91 32 30 	lds	r31, 0x3032	; 0x803032 <bufferIterator+0x1>
 862:	70 82       	st	Z, r7
 864:	bf ef       	ldi	r27, 0xFF	; 255
 866:	eb 1a       	sub	r14, r27
 868:	fb 0a       	sbc	r15, r27
}

void effect_fill_group(uint8_t* bulbGroup, uint8_t *color, uint8_t frames){
	uint8_t numBulbs = bulbGroup[0];
	
	for(uint8_t j=0; j<numBulbs; j++){
 86a:	e8 14       	cp	r14, r8
 86c:	f9 04       	cpc	r15, r9
 86e:	21 f6       	brne	.-120    	; 0x7f8 <effect_fill_group+0x4e>
			}
			next();
		}
		*bufferIterator = bufferIterator_start;
	}
 870:	df 91       	pop	r29
 872:	cf 91       	pop	r28
 874:	1f 91       	pop	r17
 876:	0f 91       	pop	r16
 878:	ff 90       	pop	r15
 87a:	ef 90       	pop	r14
 87c:	df 90       	pop	r13
 87e:	cf 90       	pop	r12
 880:	bf 90       	pop	r11
 882:	af 90       	pop	r10
 884:	9f 90       	pop	r9
 886:	8f 90       	pop	r8
 888:	7f 90       	pop	r7
 88a:	6f 90       	pop	r6
 88c:	08 95       	ret

0000088e <setup>:
}

void setup ( void ) {
	// Select internal 32MHz Oscillator as clock source
	//OSC.CTRL = 0b001;
	NVM.CTRLB |= (1 << 3); // Set EEPROM to memory mapped access
 88e:	e0 ec       	ldi	r30, 0xC0	; 192
 890:	f1 e0       	ldi	r31, 0x01	; 1
 892:	84 85       	ldd	r24, Z+12	; 0x0c
 894:	88 60       	ori	r24, 0x08	; 8
 896:	84 87       	std	Z+12, r24	; 0x0c
	
	
	srand(1337 % 255);
 898:	8e e3       	ldi	r24, 0x3E	; 62
 89a:	90 e0       	ldi	r25, 0x00	; 0
 89c:	0e 94 30 06 	call	0xc60	; 0xc60 <srand>
	
	bufferIterator = &bufferIteratorA;
 8a0:	80 ed       	ldi	r24, 0xD0	; 208
 8a2:	90 e2       	ldi	r25, 0x20	; 32
 8a4:	80 93 31 30 	sts	0x3031, r24	; 0x803031 <bufferIterator>
 8a8:	90 93 32 30 	sts	0x3032, r25	; 0x803032 <bufferIterator+0x1>
 8ac:	08 95       	ret

000008ae <main>:
volatile uint8_sequencebuffer_t sequenceBuffer;
volatile uint8_t *bufferIterator;

int main(void)
{
	setup();
 8ae:	0e 94 47 04 	call	0x88e	; 0x88e <setup>
	setupapa();
 8b2:	0e 94 1f 01 	call	0x23e	; 0x23e <setupapa>
	
	while (1) {
		sequence_letterDemo();
 8b6:	0e 94 9b 04 	call	0x936	; 0x936 <sequence_letterDemo>
		sequence_digitDemo();
 8ba:	0e 94 5d 05 	call	0xaba	; 0xaba <sequence_digitDemo>
		sequence_AuroraDemo();
 8be:	0e 94 62 04 	call	0x8c4	; 0x8c4 <sequence_AuroraDemo>
 8c2:	f9 cf       	rjmp	.-14     	; 0x8b6 <main+0x8>

000008c4 <sequence_AuroraDemo>:
	for(uint8_t i = 0; i<NUM_LEDS; i++){
		effect_RGBFade(i, c, 16);
	}
	*bufferIterator = 0;
	play();
}
 8c4:	ef 92       	push	r14
 8c6:	0f 93       	push	r16
 8c8:	1f 93       	push	r17
 8ca:	cf 93       	push	r28
 8cc:	df 93       	push	r29
 8ce:	cd b7       	in	r28, 0x3d	; 61
 8d0:	de b7       	in	r29, 0x3e	; 62
 8d2:	26 97       	sbiw	r28, 0x06	; 6
 8d4:	cd bf       	out	0x3d, r28	; 61
 8d6:	de bf       	out	0x3e, r29	; 62
 8d8:	89 e3       	ldi	r24, 0x39	; 57
 8da:	89 83       	std	Y+1, r24	; 0x01
 8dc:	8f ef       	ldi	r24, 0xFF	; 255
 8de:	8a 83       	std	Y+2, r24	; 0x02
 8e0:	84 e1       	ldi	r24, 0x14	; 20
 8e2:	8b 83       	std	Y+3, r24	; 0x03
 8e4:	1c 82       	std	Y+4, r1	; 0x04
 8e6:	96 e4       	ldi	r25, 0x46	; 70
 8e8:	9d 83       	std	Y+5, r25	; 0x05
 8ea:	8e 83       	std	Y+6, r24	; 0x06
 8ec:	15 e0       	ldi	r17, 0x05	; 5
 8ee:	ce 01       	movw	r24, r28
 8f0:	04 96       	adiw	r24, 0x04	; 4
 8f2:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <api_fill>
 8f6:	0f 2e       	mov	r0, r31
 8f8:	f0 e3       	ldi	r31, 0x30	; 48
 8fa:	ef 2e       	mov	r14, r31
 8fc:	f0 2d       	mov	r31, r0
 8fe:	0e e1       	ldi	r16, 0x1E	; 30
 900:	22 e0       	ldi	r18, 0x02	; 2
 902:	40 e1       	ldi	r20, 0x10	; 16
 904:	be 01       	movw	r22, r28
 906:	6f 5f       	subi	r22, 0xFF	; 255
 908:	7f 4f       	sbci	r23, 0xFF	; 255
 90a:	8d e7       	ldi	r24, 0x7D	; 125
 90c:	90 e2       	ldi	r25, 0x20	; 32
 90e:	0e 94 48 03 	call	0x690	; 0x690 <effect_aurora>
 912:	e0 91 31 30 	lds	r30, 0x3031	; 0x803031 <bufferIterator>
 916:	f0 91 32 30 	lds	r31, 0x3032	; 0x803032 <bufferIterator+0x1>
 91a:	10 82       	st	Z, r1
 91c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <play>
 920:	11 50       	subi	r17, 0x01	; 1
 922:	29 f7       	brne	.-54     	; 0x8ee <sequence_AuroraDemo+0x2a>
 924:	26 96       	adiw	r28, 0x06	; 6
 926:	cd bf       	out	0x3d, r28	; 61
 928:	de bf       	out	0x3e, r29	; 62
 92a:	df 91       	pop	r29
 92c:	cf 91       	pop	r28
 92e:	1f 91       	pop	r17
 930:	0f 91       	pop	r16
 932:	ef 90       	pop	r14
 934:	08 95       	ret

00000936 <sequence_letterDemo>:

void sequence_letterDemo( void ){
 936:	cf 93       	push	r28
 938:	df 93       	push	r29
 93a:	cd b7       	in	r28, 0x3d	; 61
 93c:	de b7       	in	r29, 0x3e	; 62
 93e:	26 97       	sbiw	r28, 0x06	; 6
 940:	cd bf       	out	0x3d, r28	; 61
 942:	de bf       	out	0x3e, r29	; 62
	uint8_t c[3] = {200, 0, 0};
 944:	88 ec       	ldi	r24, 0xC8	; 200
 946:	89 83       	std	Y+1, r24	; 0x01
 948:	1a 82       	std	Y+2, r1	; 0x02
 94a:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t blank[3] = {0,0,0};
 94c:	1c 82       	std	Y+4, r1	; 0x04
 94e:	1d 82       	std	Y+5, r1	; 0x05
 950:	1e 82       	std	Y+6, r1	; 0x06
	effect_fill_group(letter_A, c, 8);
 952:	48 e0       	ldi	r20, 0x08	; 8
 954:	be 01       	movw	r22, r28
 956:	6f 5f       	subi	r22, 0xFF	; 255
 958:	7f 4f       	sbci	r23, 0xFF	; 255
 95a:	80 e7       	ldi	r24, 0x70	; 112
 95c:	90 e2       	ldi	r25, 0x20	; 32
 95e:	0e 94 d5 03 	call	0x7aa	; 0x7aa <effect_fill_group>
	play_frames(8);
 962:	88 e0       	ldi	r24, 0x08	; 8
 964:	0e 94 0e 02 	call	0x41c	; 0x41c <play_frames>
	effect_fill_group(letter_A, blank, 8);
 968:	48 e0       	ldi	r20, 0x08	; 8
 96a:	be 01       	movw	r22, r28
 96c:	6c 5f       	subi	r22, 0xFC	; 252
 96e:	7f 4f       	sbci	r23, 0xFF	; 255
 970:	80 e7       	ldi	r24, 0x70	; 112
 972:	90 e2       	ldi	r25, 0x20	; 32
 974:	0e 94 d5 03 	call	0x7aa	; 0x7aa <effect_fill_group>
	effect_fill_group(letter_B, c, 8);
 978:	48 e0       	ldi	r20, 0x08	; 8
 97a:	be 01       	movw	r22, r28
 97c:	6f 5f       	subi	r22, 0xFF	; 255
 97e:	7f 4f       	sbci	r23, 0xFF	; 255
 980:	88 e6       	ldi	r24, 0x68	; 104
 982:	90 e2       	ldi	r25, 0x20	; 32
 984:	0e 94 d5 03 	call	0x7aa	; 0x7aa <effect_fill_group>
	play_frames(8);
 988:	88 e0       	ldi	r24, 0x08	; 8
 98a:	0e 94 0e 02 	call	0x41c	; 0x41c <play_frames>
	effect_fill_group(letter_B, blank, 8);
 98e:	48 e0       	ldi	r20, 0x08	; 8
 990:	be 01       	movw	r22, r28
 992:	6c 5f       	subi	r22, 0xFC	; 252
 994:	7f 4f       	sbci	r23, 0xFF	; 255
 996:	88 e6       	ldi	r24, 0x68	; 104
 998:	90 e2       	ldi	r25, 0x20	; 32
 99a:	0e 94 d5 03 	call	0x7aa	; 0x7aa <effect_fill_group>
	effect_fill_group(letter_C, c, 8);
 99e:	48 e0       	ldi	r20, 0x08	; 8
 9a0:	be 01       	movw	r22, r28
 9a2:	6f 5f       	subi	r22, 0xFF	; 255
 9a4:	7f 4f       	sbci	r23, 0xFF	; 255
 9a6:	85 e6       	ldi	r24, 0x65	; 101
 9a8:	90 e2       	ldi	r25, 0x20	; 32
 9aa:	0e 94 d5 03 	call	0x7aa	; 0x7aa <effect_fill_group>
	play_frames(8);
 9ae:	88 e0       	ldi	r24, 0x08	; 8
 9b0:	0e 94 0e 02 	call	0x41c	; 0x41c <play_frames>
	effect_fill_group(letter_C, blank, 8);
 9b4:	48 e0       	ldi	r20, 0x08	; 8
 9b6:	be 01       	movw	r22, r28
 9b8:	6c 5f       	subi	r22, 0xFC	; 252
 9ba:	7f 4f       	sbci	r23, 0xFF	; 255
 9bc:	85 e6       	ldi	r24, 0x65	; 101
 9be:	90 e2       	ldi	r25, 0x20	; 32
 9c0:	0e 94 d5 03 	call	0x7aa	; 0x7aa <effect_fill_group>
	effect_fill_group(letter_D, c, 8);
 9c4:	48 e0       	ldi	r20, 0x08	; 8
 9c6:	be 01       	movw	r22, r28
 9c8:	6f 5f       	subi	r22, 0xFF	; 255
 9ca:	7f 4f       	sbci	r23, 0xFF	; 255
 9cc:	86 e5       	ldi	r24, 0x56	; 86
 9ce:	90 e2       	ldi	r25, 0x20	; 32
 9d0:	0e 94 d5 03 	call	0x7aa	; 0x7aa <effect_fill_group>
	play_frames(8);
 9d4:	88 e0       	ldi	r24, 0x08	; 8
 9d6:	0e 94 0e 02 	call	0x41c	; 0x41c <play_frames>
	effect_fill_group(letter_D, blank, 8);
 9da:	48 e0       	ldi	r20, 0x08	; 8
 9dc:	be 01       	movw	r22, r28
 9de:	6c 5f       	subi	r22, 0xFC	; 252
 9e0:	7f 4f       	sbci	r23, 0xFF	; 255
 9e2:	86 e5       	ldi	r24, 0x56	; 86
 9e4:	90 e2       	ldi	r25, 0x20	; 32
 9e6:	0e 94 d5 03 	call	0x7aa	; 0x7aa <effect_fill_group>
	effect_fill_group(letter_E, c, 8);
 9ea:	48 e0       	ldi	r20, 0x08	; 8
 9ec:	be 01       	movw	r22, r28
 9ee:	6f 5f       	subi	r22, 0xFF	; 255
 9f0:	7f 4f       	sbci	r23, 0xFF	; 255
 9f2:	8b e4       	ldi	r24, 0x4B	; 75
 9f4:	90 e2       	ldi	r25, 0x20	; 32
 9f6:	0e 94 d5 03 	call	0x7aa	; 0x7aa <effect_fill_group>
	play_frames(8);
 9fa:	88 e0       	ldi	r24, 0x08	; 8
 9fc:	0e 94 0e 02 	call	0x41c	; 0x41c <play_frames>
	effect_fill_group(letter_E, blank, 8);
 a00:	48 e0       	ldi	r20, 0x08	; 8
 a02:	be 01       	movw	r22, r28
 a04:	6c 5f       	subi	r22, 0xFC	; 252
 a06:	7f 4f       	sbci	r23, 0xFF	; 255
 a08:	8b e4       	ldi	r24, 0x4B	; 75
 a0a:	90 e2       	ldi	r25, 0x20	; 32
 a0c:	0e 94 d5 03 	call	0x7aa	; 0x7aa <effect_fill_group>
	effect_fill_group(letter_F, c, 8);
 a10:	48 e0       	ldi	r20, 0x08	; 8
 a12:	be 01       	movw	r22, r28
 a14:	6f 5f       	subi	r22, 0xFF	; 255
 a16:	7f 4f       	sbci	r23, 0xFF	; 255
 a18:	88 e4       	ldi	r24, 0x48	; 72
 a1a:	90 e2       	ldi	r25, 0x20	; 32
 a1c:	0e 94 d5 03 	call	0x7aa	; 0x7aa <effect_fill_group>
	play_frames(8);
 a20:	88 e0       	ldi	r24, 0x08	; 8
 a22:	0e 94 0e 02 	call	0x41c	; 0x41c <play_frames>
	effect_fill_group(letter_F, blank, 8);
 a26:	48 e0       	ldi	r20, 0x08	; 8
 a28:	be 01       	movw	r22, r28
 a2a:	6c 5f       	subi	r22, 0xFC	; 252
 a2c:	7f 4f       	sbci	r23, 0xFF	; 255
 a2e:	88 e4       	ldi	r24, 0x48	; 72
 a30:	90 e2       	ldi	r25, 0x20	; 32
 a32:	0e 94 d5 03 	call	0x7aa	; 0x7aa <effect_fill_group>
	effect_fill_group(letter_G, c, 8);
 a36:	48 e0       	ldi	r20, 0x08	; 8
 a38:	be 01       	movw	r22, r28
 a3a:	6f 5f       	subi	r22, 0xFF	; 255
 a3c:	7f 4f       	sbci	r23, 0xFF	; 255
 a3e:	89 e3       	ldi	r24, 0x39	; 57
 a40:	90 e2       	ldi	r25, 0x20	; 32
 a42:	0e 94 d5 03 	call	0x7aa	; 0x7aa <effect_fill_group>
	play_frames(8);
 a46:	88 e0       	ldi	r24, 0x08	; 8
 a48:	0e 94 0e 02 	call	0x41c	; 0x41c <play_frames>
	effect_fill_group(letter_G, blank, 8);
 a4c:	48 e0       	ldi	r20, 0x08	; 8
 a4e:	be 01       	movw	r22, r28
 a50:	6c 5f       	subi	r22, 0xFC	; 252
 a52:	7f 4f       	sbci	r23, 0xFF	; 255
 a54:	89 e3       	ldi	r24, 0x39	; 57
 a56:	90 e2       	ldi	r25, 0x20	; 32
 a58:	0e 94 d5 03 	call	0x7aa	; 0x7aa <effect_fill_group>
	effect_fill_group(letter_H, c, 8);
 a5c:	48 e0       	ldi	r20, 0x08	; 8
 a5e:	be 01       	movw	r22, r28
 a60:	6f 5f       	subi	r22, 0xFF	; 255
 a62:	7f 4f       	sbci	r23, 0xFF	; 255
 a64:	8e e2       	ldi	r24, 0x2E	; 46
 a66:	90 e2       	ldi	r25, 0x20	; 32
 a68:	0e 94 d5 03 	call	0x7aa	; 0x7aa <effect_fill_group>
	play_frames(8);
 a6c:	88 e0       	ldi	r24, 0x08	; 8
 a6e:	0e 94 0e 02 	call	0x41c	; 0x41c <play_frames>
	effect_fill_group(letter_H, blank, 8);
 a72:	48 e0       	ldi	r20, 0x08	; 8
 a74:	be 01       	movw	r22, r28
 a76:	6c 5f       	subi	r22, 0xFC	; 252
 a78:	7f 4f       	sbci	r23, 0xFF	; 255
 a7a:	8e e2       	ldi	r24, 0x2E	; 46
 a7c:	90 e2       	ldi	r25, 0x20	; 32
 a7e:	0e 94 d5 03 	call	0x7aa	; 0x7aa <effect_fill_group>
	effect_fill_group(letter_I, c, 8);
 a82:	48 e0       	ldi	r20, 0x08	; 8
 a84:	be 01       	movw	r22, r28
 a86:	6f 5f       	subi	r22, 0xFF	; 255
 a88:	7f 4f       	sbci	r23, 0xFF	; 255
 a8a:	82 e2       	ldi	r24, 0x22	; 34
 a8c:	90 e2       	ldi	r25, 0x20	; 32
 a8e:	0e 94 d5 03 	call	0x7aa	; 0x7aa <effect_fill_group>
	play_frames(8);
 a92:	88 e0       	ldi	r24, 0x08	; 8
 a94:	0e 94 0e 02 	call	0x41c	; 0x41c <play_frames>
	effect_fill_group(letter_I, blank, 8);
 a98:	48 e0       	ldi	r20, 0x08	; 8
 a9a:	be 01       	movw	r22, r28
 a9c:	6c 5f       	subi	r22, 0xFC	; 252
 a9e:	7f 4f       	sbci	r23, 0xFF	; 255
 aa0:	82 e2       	ldi	r24, 0x22	; 34
 aa2:	90 e2       	ldi	r25, 0x20	; 32
 aa4:	0e 94 d5 03 	call	0x7aa	; 0x7aa <effect_fill_group>
	play_frames(8);
 aa8:	88 e0       	ldi	r24, 0x08	; 8
 aaa:	0e 94 0e 02 	call	0x41c	; 0x41c <play_frames>
}
 aae:	26 96       	adiw	r28, 0x06	; 6
 ab0:	cd bf       	out	0x3d, r28	; 61
 ab2:	de bf       	out	0x3e, r29	; 62
 ab4:	df 91       	pop	r29
 ab6:	cf 91       	pop	r28
 ab8:	08 95       	ret

00000aba <sequence_digitDemo>:

void sequence_digitDemo( void ){
 aba:	cf 93       	push	r28
 abc:	df 93       	push	r29
 abe:	cd b7       	in	r28, 0x3d	; 61
 ac0:	de b7       	in	r29, 0x3e	; 62
 ac2:	26 97       	sbiw	r28, 0x06	; 6
 ac4:	cd bf       	out	0x3d, r28	; 61
 ac6:	de bf       	out	0x3e, r29	; 62
	uint8_t c[3] = {200, 0, 0};
 ac8:	88 ec       	ldi	r24, 0xC8	; 200
 aca:	89 83       	std	Y+1, r24	; 0x01
 acc:	1a 82       	std	Y+2, r1	; 0x02
 ace:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t blank[3] = {0,0,0};
 ad0:	1c 82       	std	Y+4, r1	; 0x04
 ad2:	1d 82       	std	Y+5, r1	; 0x05
 ad4:	1e 82       	std	Y+6, r1	; 0x06
	effect_fill_group(digit_A, c, 8);
 ad6:	48 e0       	ldi	r20, 0x08	; 8
 ad8:	be 01       	movw	r22, r28
 ada:	6f 5f       	subi	r22, 0xFF	; 255
 adc:	7f 4f       	sbci	r23, 0xFF	; 255
 ade:	8a e1       	ldi	r24, 0x1A	; 26
 ae0:	90 e2       	ldi	r25, 0x20	; 32
 ae2:	0e 94 d5 03 	call	0x7aa	; 0x7aa <effect_fill_group>
	play_frames(8);
 ae6:	88 e0       	ldi	r24, 0x08	; 8
 ae8:	0e 94 0e 02 	call	0x41c	; 0x41c <play_frames>
	effect_fill_group(digit_A, blank, 8);
 aec:	48 e0       	ldi	r20, 0x08	; 8
 aee:	be 01       	movw	r22, r28
 af0:	6c 5f       	subi	r22, 0xFC	; 252
 af2:	7f 4f       	sbci	r23, 0xFF	; 255
 af4:	8a e1       	ldi	r24, 0x1A	; 26
 af6:	90 e2       	ldi	r25, 0x20	; 32
 af8:	0e 94 d5 03 	call	0x7aa	; 0x7aa <effect_fill_group>
	effect_fill_group(digit_B, c, 8);
 afc:	48 e0       	ldi	r20, 0x08	; 8
 afe:	be 01       	movw	r22, r28
 b00:	6f 5f       	subi	r22, 0xFF	; 255
 b02:	7f 4f       	sbci	r23, 0xFF	; 255
 b04:	8f e0       	ldi	r24, 0x0F	; 15
 b06:	90 e2       	ldi	r25, 0x20	; 32
 b08:	0e 94 d5 03 	call	0x7aa	; 0x7aa <effect_fill_group>
	play_frames(8);
 b0c:	88 e0       	ldi	r24, 0x08	; 8
 b0e:	0e 94 0e 02 	call	0x41c	; 0x41c <play_frames>
	effect_fill_group(digit_B, blank, 8);
 b12:	48 e0       	ldi	r20, 0x08	; 8
 b14:	be 01       	movw	r22, r28
 b16:	6c 5f       	subi	r22, 0xFC	; 252
 b18:	7f 4f       	sbci	r23, 0xFF	; 255
 b1a:	8f e0       	ldi	r24, 0x0F	; 15
 b1c:	90 e2       	ldi	r25, 0x20	; 32
 b1e:	0e 94 d5 03 	call	0x7aa	; 0x7aa <effect_fill_group>
	effect_fill_group(digit_C, c, 8);
 b22:	48 e0       	ldi	r20, 0x08	; 8
 b24:	be 01       	movw	r22, r28
 b26:	6f 5f       	subi	r22, 0xFF	; 255
 b28:	7f 4f       	sbci	r23, 0xFF	; 255
 b2a:	84 e0       	ldi	r24, 0x04	; 4
 b2c:	90 e2       	ldi	r25, 0x20	; 32
 b2e:	0e 94 d5 03 	call	0x7aa	; 0x7aa <effect_fill_group>
	play_frames(8);
 b32:	88 e0       	ldi	r24, 0x08	; 8
 b34:	0e 94 0e 02 	call	0x41c	; 0x41c <play_frames>
	effect_fill_group(digit_C, blank, 8);
 b38:	48 e0       	ldi	r20, 0x08	; 8
 b3a:	be 01       	movw	r22, r28
 b3c:	6c 5f       	subi	r22, 0xFC	; 252
 b3e:	7f 4f       	sbci	r23, 0xFF	; 255
 b40:	84 e0       	ldi	r24, 0x04	; 4
 b42:	90 e2       	ldi	r25, 0x20	; 32
 b44:	0e 94 d5 03 	call	0x7aa	; 0x7aa <effect_fill_group>
	play_frames(8);
 b48:	88 e0       	ldi	r24, 0x08	; 8
 b4a:	0e 94 0e 02 	call	0x41c	; 0x41c <play_frames>
 b4e:	26 96       	adiw	r28, 0x06	; 6
 b50:	cd bf       	out	0x3d, r28	; 61
 b52:	de bf       	out	0x3e, r29	; 62
 b54:	df 91       	pop	r29
 b56:	cf 91       	pop	r28
 b58:	08 95       	ret

00000b5a <__udivmodqi4>:
 b5a:	99 1b       	sub	r25, r25
 b5c:	79 e0       	ldi	r23, 0x09	; 9
 b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__udivmodqi4_ep>

00000b60 <__udivmodqi4_loop>:
 b60:	99 1f       	adc	r25, r25
 b62:	96 17       	cp	r25, r22
 b64:	08 f0       	brcs	.+2      	; 0xb68 <__udivmodqi4_ep>
 b66:	96 1b       	sub	r25, r22

00000b68 <__udivmodqi4_ep>:
 b68:	88 1f       	adc	r24, r24
 b6a:	7a 95       	dec	r23
 b6c:	c9 f7       	brne	.-14     	; 0xb60 <__udivmodqi4_loop>
 b6e:	80 95       	com	r24
 b70:	08 95       	ret

00000b72 <__divmodhi4>:
 b72:	97 fb       	bst	r25, 7
 b74:	07 2e       	mov	r0, r23
 b76:	16 f4       	brtc	.+4      	; 0xb7c <__divmodhi4+0xa>
 b78:	00 94       	com	r0
 b7a:	07 d0       	rcall	.+14     	; 0xb8a <__divmodhi4_neg1>
 b7c:	77 fd       	sbrc	r23, 7
 b7e:	09 d0       	rcall	.+18     	; 0xb92 <__divmodhi4_neg2>
 b80:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__udivmodhi4>
 b84:	07 fc       	sbrc	r0, 7
 b86:	05 d0       	rcall	.+10     	; 0xb92 <__divmodhi4_neg2>
 b88:	3e f4       	brtc	.+14     	; 0xb98 <__divmodhi4_exit>

00000b8a <__divmodhi4_neg1>:
 b8a:	90 95       	com	r25
 b8c:	81 95       	neg	r24
 b8e:	9f 4f       	sbci	r25, 0xFF	; 255
 b90:	08 95       	ret

00000b92 <__divmodhi4_neg2>:
 b92:	70 95       	com	r23
 b94:	61 95       	neg	r22
 b96:	7f 4f       	sbci	r23, 0xFF	; 255

00000b98 <__divmodhi4_exit>:
 b98:	08 95       	ret

00000b9a <__udivmodhi4>:
 b9a:	aa 1b       	sub	r26, r26
 b9c:	bb 1b       	sub	r27, r27
 b9e:	51 e1       	ldi	r21, 0x11	; 17
 ba0:	07 c0       	rjmp	.+14     	; 0xbb0 <__udivmodhi4_ep>

00000ba2 <__udivmodhi4_loop>:
 ba2:	aa 1f       	adc	r26, r26
 ba4:	bb 1f       	adc	r27, r27
 ba6:	a6 17       	cp	r26, r22
 ba8:	b7 07       	cpc	r27, r23
 baa:	10 f0       	brcs	.+4      	; 0xbb0 <__udivmodhi4_ep>
 bac:	a6 1b       	sub	r26, r22
 bae:	b7 0b       	sbc	r27, r23

00000bb0 <__udivmodhi4_ep>:
 bb0:	88 1f       	adc	r24, r24
 bb2:	99 1f       	adc	r25, r25
 bb4:	5a 95       	dec	r21
 bb6:	a9 f7       	brne	.-22     	; 0xba2 <__udivmodhi4_loop>
 bb8:	80 95       	com	r24
 bba:	90 95       	com	r25
 bbc:	bc 01       	movw	r22, r24
 bbe:	cd 01       	movw	r24, r26
 bc0:	08 95       	ret

00000bc2 <do_rand>:
 bc2:	8f 92       	push	r8
 bc4:	9f 92       	push	r9
 bc6:	af 92       	push	r10
 bc8:	bf 92       	push	r11
 bca:	cf 92       	push	r12
 bcc:	df 92       	push	r13
 bce:	ef 92       	push	r14
 bd0:	ff 92       	push	r15
 bd2:	cf 93       	push	r28
 bd4:	df 93       	push	r29
 bd6:	ec 01       	movw	r28, r24
 bd8:	68 81       	ld	r22, Y
 bda:	79 81       	ldd	r23, Y+1	; 0x01
 bdc:	8a 81       	ldd	r24, Y+2	; 0x02
 bde:	9b 81       	ldd	r25, Y+3	; 0x03
 be0:	61 15       	cp	r22, r1
 be2:	71 05       	cpc	r23, r1
 be4:	81 05       	cpc	r24, r1
 be6:	91 05       	cpc	r25, r1
 be8:	21 f4       	brne	.+8      	; 0xbf2 <do_rand+0x30>
 bea:	64 e2       	ldi	r22, 0x24	; 36
 bec:	79 ed       	ldi	r23, 0xD9	; 217
 bee:	8b e5       	ldi	r24, 0x5B	; 91
 bf0:	97 e0       	ldi	r25, 0x07	; 7
 bf2:	2d e1       	ldi	r18, 0x1D	; 29
 bf4:	33 ef       	ldi	r19, 0xF3	; 243
 bf6:	41 e0       	ldi	r20, 0x01	; 1
 bf8:	50 e0       	ldi	r21, 0x00	; 0
 bfa:	0e 94 3b 06 	call	0xc76	; 0xc76 <__divmodsi4>
 bfe:	49 01       	movw	r8, r18
 c00:	5a 01       	movw	r10, r20
 c02:	9b 01       	movw	r18, r22
 c04:	ac 01       	movw	r20, r24
 c06:	a7 ea       	ldi	r26, 0xA7	; 167
 c08:	b1 e4       	ldi	r27, 0x41	; 65
 c0a:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <__muluhisi3>
 c0e:	6b 01       	movw	r12, r22
 c10:	7c 01       	movw	r14, r24
 c12:	ac ee       	ldi	r26, 0xEC	; 236
 c14:	b4 ef       	ldi	r27, 0xF4	; 244
 c16:	a5 01       	movw	r20, r10
 c18:	94 01       	movw	r18, r8
 c1a:	0e 94 68 06 	call	0xcd0	; 0xcd0 <__mulohisi3>
 c1e:	dc 01       	movw	r26, r24
 c20:	cb 01       	movw	r24, r22
 c22:	8c 0d       	add	r24, r12
 c24:	9d 1d       	adc	r25, r13
 c26:	ae 1d       	adc	r26, r14
 c28:	bf 1d       	adc	r27, r15
 c2a:	b7 ff       	sbrs	r27, 7
 c2c:	03 c0       	rjmp	.+6      	; 0xc34 <do_rand+0x72>
 c2e:	01 97       	sbiw	r24, 0x01	; 1
 c30:	a1 09       	sbc	r26, r1
 c32:	b0 48       	sbci	r27, 0x80	; 128
 c34:	88 83       	st	Y, r24
 c36:	99 83       	std	Y+1, r25	; 0x01
 c38:	aa 83       	std	Y+2, r26	; 0x02
 c3a:	bb 83       	std	Y+3, r27	; 0x03
 c3c:	9f 77       	andi	r25, 0x7F	; 127
 c3e:	df 91       	pop	r29
 c40:	cf 91       	pop	r28
 c42:	ff 90       	pop	r15
 c44:	ef 90       	pop	r14
 c46:	df 90       	pop	r13
 c48:	cf 90       	pop	r12
 c4a:	bf 90       	pop	r11
 c4c:	af 90       	pop	r10
 c4e:	9f 90       	pop	r9
 c50:	8f 90       	pop	r8
 c52:	08 95       	ret

00000c54 <rand_r>:
 c54:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <do_rand>

00000c58 <rand>:
 c58:	80 e0       	ldi	r24, 0x00	; 0
 c5a:	90 e2       	ldi	r25, 0x20	; 32
 c5c:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <do_rand>

00000c60 <srand>:
 c60:	a0 e0       	ldi	r26, 0x00	; 0
 c62:	b0 e0       	ldi	r27, 0x00	; 0
 c64:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
 c68:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
 c6c:	a0 93 02 20 	sts	0x2002, r26	; 0x802002 <__data_start+0x2>
 c70:	b0 93 03 20 	sts	0x2003, r27	; 0x802003 <__data_start+0x3>
 c74:	08 95       	ret

00000c76 <__divmodsi4>:
 c76:	05 2e       	mov	r0, r21
 c78:	97 fb       	bst	r25, 7
 c7a:	1e f4       	brtc	.+6      	; 0xc82 <__divmodsi4+0xc>
 c7c:	00 94       	com	r0
 c7e:	0e 94 52 06 	call	0xca4	; 0xca4 <__negsi2>
 c82:	57 fd       	sbrc	r21, 7
 c84:	07 d0       	rcall	.+14     	; 0xc94 <__divmodsi4_neg2>
 c86:	0e 94 6d 06 	call	0xcda	; 0xcda <__udivmodsi4>
 c8a:	07 fc       	sbrc	r0, 7
 c8c:	03 d0       	rcall	.+6      	; 0xc94 <__divmodsi4_neg2>
 c8e:	4e f4       	brtc	.+18     	; 0xca2 <__divmodsi4_exit>
 c90:	0c 94 52 06 	jmp	0xca4	; 0xca4 <__negsi2>

00000c94 <__divmodsi4_neg2>:
 c94:	50 95       	com	r21
 c96:	40 95       	com	r20
 c98:	30 95       	com	r19
 c9a:	21 95       	neg	r18
 c9c:	3f 4f       	sbci	r19, 0xFF	; 255
 c9e:	4f 4f       	sbci	r20, 0xFF	; 255
 ca0:	5f 4f       	sbci	r21, 0xFF	; 255

00000ca2 <__divmodsi4_exit>:
 ca2:	08 95       	ret

00000ca4 <__negsi2>:
 ca4:	90 95       	com	r25
 ca6:	80 95       	com	r24
 ca8:	70 95       	com	r23
 caa:	61 95       	neg	r22
 cac:	7f 4f       	sbci	r23, 0xFF	; 255
 cae:	8f 4f       	sbci	r24, 0xFF	; 255
 cb0:	9f 4f       	sbci	r25, 0xFF	; 255
 cb2:	08 95       	ret

00000cb4 <__muluhisi3>:
 cb4:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__umulhisi3>
 cb8:	a5 9f       	mul	r26, r21
 cba:	90 0d       	add	r25, r0
 cbc:	b4 9f       	mul	r27, r20
 cbe:	90 0d       	add	r25, r0
 cc0:	a4 9f       	mul	r26, r20
 cc2:	80 0d       	add	r24, r0
 cc4:	91 1d       	adc	r25, r1
 cc6:	11 24       	eor	r1, r1
 cc8:	08 95       	ret

00000cca <__mulshisi3>:
 cca:	b7 ff       	sbrs	r27, 7
 ccc:	0c 94 5a 06 	jmp	0xcb4	; 0xcb4 <__muluhisi3>

00000cd0 <__mulohisi3>:
 cd0:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <__muluhisi3>
 cd4:	82 1b       	sub	r24, r18
 cd6:	93 0b       	sbc	r25, r19
 cd8:	08 95       	ret

00000cda <__udivmodsi4>:
 cda:	a1 e2       	ldi	r26, 0x21	; 33
 cdc:	1a 2e       	mov	r1, r26
 cde:	aa 1b       	sub	r26, r26
 ce0:	bb 1b       	sub	r27, r27
 ce2:	fd 01       	movw	r30, r26
 ce4:	0d c0       	rjmp	.+26     	; 0xd00 <__udivmodsi4_ep>

00000ce6 <__udivmodsi4_loop>:
 ce6:	aa 1f       	adc	r26, r26
 ce8:	bb 1f       	adc	r27, r27
 cea:	ee 1f       	adc	r30, r30
 cec:	ff 1f       	adc	r31, r31
 cee:	a2 17       	cp	r26, r18
 cf0:	b3 07       	cpc	r27, r19
 cf2:	e4 07       	cpc	r30, r20
 cf4:	f5 07       	cpc	r31, r21
 cf6:	20 f0       	brcs	.+8      	; 0xd00 <__udivmodsi4_ep>
 cf8:	a2 1b       	sub	r26, r18
 cfa:	b3 0b       	sbc	r27, r19
 cfc:	e4 0b       	sbc	r30, r20
 cfe:	f5 0b       	sbc	r31, r21

00000d00 <__udivmodsi4_ep>:
 d00:	66 1f       	adc	r22, r22
 d02:	77 1f       	adc	r23, r23
 d04:	88 1f       	adc	r24, r24
 d06:	99 1f       	adc	r25, r25
 d08:	1a 94       	dec	r1
 d0a:	69 f7       	brne	.-38     	; 0xce6 <__udivmodsi4_loop>
 d0c:	60 95       	com	r22
 d0e:	70 95       	com	r23
 d10:	80 95       	com	r24
 d12:	90 95       	com	r25
 d14:	9b 01       	movw	r18, r22
 d16:	ac 01       	movw	r20, r24
 d18:	bd 01       	movw	r22, r26
 d1a:	cf 01       	movw	r24, r30
 d1c:	08 95       	ret

00000d1e <__umulhisi3>:
 d1e:	a2 9f       	mul	r26, r18
 d20:	b0 01       	movw	r22, r0
 d22:	b3 9f       	mul	r27, r19
 d24:	c0 01       	movw	r24, r0
 d26:	a3 9f       	mul	r26, r19
 d28:	70 0d       	add	r23, r0
 d2a:	81 1d       	adc	r24, r1
 d2c:	11 24       	eor	r1, r1
 d2e:	91 1d       	adc	r25, r1
 d30:	b2 9f       	mul	r27, r18
 d32:	70 0d       	add	r23, r0
 d34:	81 1d       	adc	r24, r1
 d36:	11 24       	eor	r1, r1
 d38:	91 1d       	adc	r25, r1
 d3a:	08 95       	ret

00000d3c <_exit>:
 d3c:	f8 94       	cli

00000d3e <__stop_program>:
 d3e:	ff cf       	rjmp	.-2      	; 0xd3e <__stop_program>
