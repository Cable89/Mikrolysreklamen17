
Mikrolysreklamen17.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  00000516  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000516  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000548  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002ff6  00000000  00000000  00000600  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000296b  00000000  00000000  000035f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000809  00000000  00000000  00005f61  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f8  00000000  00000000  0000676c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001e6d  00000000  00000000  00006864  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002fd  00000000  00000000  000086d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  000089ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
   8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
   c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  10:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  14:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  18:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  1c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  20:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  24:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  28:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  2c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  30:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  34:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  38:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  3c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  40:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  44:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  48:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  4c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  50:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  54:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  58:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  5c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  60:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  64:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  68:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  6c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  70:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  74:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  78:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  7c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  80:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  84:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  88:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  8c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  90:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  94:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  98:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  9c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  a0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  a4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  a8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  ac:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  b0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  b4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  b8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  bc:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  c0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  c4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  c8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  cc:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  d0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  d4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  d8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  dc:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  e0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  e4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  e8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  ec:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  f0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  f4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  f8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  fc:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 100:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 104:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 108:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 10c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 110:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 114:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 118:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 11c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 120:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 124:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 128:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 12c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 130:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 134:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 138:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 13c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 140:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 144:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 148:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 14c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 150:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 154:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 158:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 15c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 160:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 164:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 168:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 16c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 170:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 174:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 178:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 17c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 180:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 184:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 188:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 18c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 190:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 194:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 198:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 19c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1a0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1a4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1a8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1ac:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1b0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1b4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1b8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1bc:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1c0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1c4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1c8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1cc:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1d0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1d4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1d8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1dc:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1e0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1e4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1e8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1ec:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1f0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1f4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1f8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e2       	ldi	r29, 0x2F	; 47
 206:	de bf       	out	0x3e, r29	; 62
 208:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <main>
 20c:	0c 94 5f 02 	jmp	0x4be	; 0x4be <_exit>

00000210 <__bad_interrupt>:
 210:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000214 <setupapa>:
#include "Mikrolysreklamen.h"
#include "apa102.h"

void setupapa( void ){
	// Set clk and data pins as output
	APA_PORT.DIR = (1 << CLK_PIN) | (1 << DATA_PIN);
 214:	e0 e6       	ldi	r30, 0x60	; 96
 216:	f6 e0       	ldi	r31, 0x06	; 6
 218:	80 ea       	ldi	r24, 0xA0	; 160
 21a:	80 83       	st	Z, r24
	// Set low just in case
	APA_PORT.OUT = 0;
 21c:	14 82       	std	Z+4, r1	; 0x04
 21e:	08 95       	ret

00000220 <bitbangbonanza>:
		bitbangbonanza(0);
	}
}

void bitbangbonanza( uint8_t val){
	APA_PORT.OUT = ( (val >> 7 & 1) << DATA_PIN ); // MSB of data
 220:	98 2f       	mov	r25, r24
 222:	99 1f       	adc	r25, r25
 224:	99 27       	eor	r25, r25
 226:	99 1f       	adc	r25, r25
 228:	92 95       	swap	r25
 22a:	99 0f       	add	r25, r25
 22c:	90 7e       	andi	r25, 0xE0	; 224
 22e:	e0 e6       	ldi	r30, 0x60	; 96
 230:	f6 e0       	ldi	r31, 0x06	; 6
 232:	94 83       	std	Z+4, r25	; 0x04
	APA_PORT.OUT |= (1 << CLK_PIN); // Set clk high
 234:	94 81       	ldd	r25, Z+4	; 0x04
 236:	90 68       	ori	r25, 0x80	; 128
 238:	94 83       	std	Z+4, r25	; 0x04
	APA_PORT.OUT &= ~(1 << CLK_PIN); // Set clk low
 23a:	94 81       	ldd	r25, Z+4	; 0x04
 23c:	9f 77       	andi	r25, 0x7F	; 127
 23e:	94 83       	std	Z+4, r25	; 0x04
	APA_PORT.OUT = ( (val >> 6 & 1) << DATA_PIN );
 240:	86 fb       	bst	r24, 6
 242:	99 27       	eor	r25, r25
 244:	90 f9       	bld	r25, 0
 246:	92 95       	swap	r25
 248:	99 0f       	add	r25, r25
 24a:	90 7e       	andi	r25, 0xE0	; 224
 24c:	94 83       	std	Z+4, r25	; 0x04
	APA_PORT.OUT |= (1 << CLK_PIN);
 24e:	94 81       	ldd	r25, Z+4	; 0x04
 250:	90 68       	ori	r25, 0x80	; 128
 252:	94 83       	std	Z+4, r25	; 0x04
	APA_PORT.OUT &= ~(1 << CLK_PIN);
 254:	94 81       	ldd	r25, Z+4	; 0x04
 256:	9f 77       	andi	r25, 0x7F	; 127
 258:	94 83       	std	Z+4, r25	; 0x04
	APA_PORT.OUT = ( (val >> 5 & 1) << DATA_PIN );
 25a:	98 2f       	mov	r25, r24
 25c:	90 72       	andi	r25, 0x20	; 32
 25e:	94 83       	std	Z+4, r25	; 0x04
	APA_PORT.OUT |= (1 << CLK_PIN);
 260:	94 81       	ldd	r25, Z+4	; 0x04
 262:	90 68       	ori	r25, 0x80	; 128
 264:	94 83       	std	Z+4, r25	; 0x04
	APA_PORT.OUT &= ~(1 << CLK_PIN);
 266:	94 81       	ldd	r25, Z+4	; 0x04
 268:	9f 77       	andi	r25, 0x7F	; 127
 26a:	94 83       	std	Z+4, r25	; 0x04
	APA_PORT.OUT = ( (val >> 4 & 1) << DATA_PIN );
 26c:	84 fb       	bst	r24, 4
 26e:	99 27       	eor	r25, r25
 270:	90 f9       	bld	r25, 0
 272:	92 95       	swap	r25
 274:	99 0f       	add	r25, r25
 276:	90 7e       	andi	r25, 0xE0	; 224
 278:	94 83       	std	Z+4, r25	; 0x04
	APA_PORT.OUT |= (1 << CLK_PIN);
 27a:	94 81       	ldd	r25, Z+4	; 0x04
 27c:	90 68       	ori	r25, 0x80	; 128
 27e:	94 83       	std	Z+4, r25	; 0x04
	APA_PORT.OUT &= ~(1 << CLK_PIN);
 280:	94 81       	ldd	r25, Z+4	; 0x04
 282:	9f 77       	andi	r25, 0x7F	; 127
 284:	94 83       	std	Z+4, r25	; 0x04
	APA_PORT.OUT = ( (val >> 3 & 1) << DATA_PIN );
 286:	83 fb       	bst	r24, 3
 288:	99 27       	eor	r25, r25
 28a:	90 f9       	bld	r25, 0
 28c:	92 95       	swap	r25
 28e:	99 0f       	add	r25, r25
 290:	90 7e       	andi	r25, 0xE0	; 224
 292:	94 83       	std	Z+4, r25	; 0x04
	APA_PORT.OUT |= (1 << CLK_PIN);
 294:	94 81       	ldd	r25, Z+4	; 0x04
 296:	90 68       	ori	r25, 0x80	; 128
 298:	94 83       	std	Z+4, r25	; 0x04
	APA_PORT.OUT &= ~(1 << CLK_PIN);
 29a:	94 81       	ldd	r25, Z+4	; 0x04
 29c:	9f 77       	andi	r25, 0x7F	; 127
 29e:	94 83       	std	Z+4, r25	; 0x04
	APA_PORT.OUT = ( (val >> 2 & 1) << DATA_PIN );
 2a0:	82 fb       	bst	r24, 2
 2a2:	99 27       	eor	r25, r25
 2a4:	90 f9       	bld	r25, 0
 2a6:	92 95       	swap	r25
 2a8:	99 0f       	add	r25, r25
 2aa:	90 7e       	andi	r25, 0xE0	; 224
 2ac:	94 83       	std	Z+4, r25	; 0x04
	APA_PORT.OUT |= (1 << CLK_PIN);
 2ae:	94 81       	ldd	r25, Z+4	; 0x04
 2b0:	90 68       	ori	r25, 0x80	; 128
 2b2:	94 83       	std	Z+4, r25	; 0x04
	APA_PORT.OUT &= ~(1 << CLK_PIN);
 2b4:	94 81       	ldd	r25, Z+4	; 0x04
 2b6:	9f 77       	andi	r25, 0x7F	; 127
 2b8:	94 83       	std	Z+4, r25	; 0x04
	APA_PORT.OUT = ( (val >> 1 & 1) << DATA_PIN );
 2ba:	81 fb       	bst	r24, 1
 2bc:	99 27       	eor	r25, r25
 2be:	90 f9       	bld	r25, 0
 2c0:	92 95       	swap	r25
 2c2:	99 0f       	add	r25, r25
 2c4:	90 7e       	andi	r25, 0xE0	; 224
 2c6:	94 83       	std	Z+4, r25	; 0x04
	APA_PORT.OUT |= (1 << CLK_PIN);
 2c8:	94 81       	ldd	r25, Z+4	; 0x04
 2ca:	90 68       	ori	r25, 0x80	; 128
 2cc:	94 83       	std	Z+4, r25	; 0x04
	APA_PORT.OUT &= ~(1 << CLK_PIN);
 2ce:	94 81       	ldd	r25, Z+4	; 0x04
 2d0:	9f 77       	andi	r25, 0x7F	; 127
 2d2:	94 83       	std	Z+4, r25	; 0x04
	APA_PORT.OUT = ( (val >> 0 & 1) << DATA_PIN ); // LSB of data
 2d4:	81 70       	andi	r24, 0x01	; 1
 2d6:	82 95       	swap	r24
 2d8:	88 0f       	add	r24, r24
 2da:	80 7e       	andi	r24, 0xE0	; 224
 2dc:	84 83       	std	Z+4, r24	; 0x04
	APA_PORT.OUT |= (1 << CLK_PIN);
 2de:	84 81       	ldd	r24, Z+4	; 0x04
 2e0:	80 68       	ori	r24, 0x80	; 128
 2e2:	84 83       	std	Z+4, r24	; 0x04
	APA_PORT.OUT &= ~(1 << CLK_PIN);
 2e4:	84 81       	ldd	r24, Z+4	; 0x04
 2e6:	8f 77       	andi	r24, 0x7F	; 127
 2e8:	84 83       	std	Z+4, r24	; 0x04
 2ea:	08 95       	ret

000002ec <startframe>:
	// Set low just in case
	APA_PORT.OUT = 0;
}

void startframe ( void ){
	bitbangbonanza(0);
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	0e 94 10 01 	call	0x220	; 0x220 <bitbangbonanza>
	bitbangbonanza(0);
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	0e 94 10 01 	call	0x220	; 0x220 <bitbangbonanza>
	bitbangbonanza(0);
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	0e 94 10 01 	call	0x220	; 0x220 <bitbangbonanza>
	bitbangbonanza(0);
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	0e 94 10 01 	call	0x220	; 0x220 <bitbangbonanza>
 304:	08 95       	ret

00000306 <endframe>:
}

void endframe ( uint8_t count ){
 306:	0f 93       	push	r16
 308:	1f 93       	push	r17
 30a:	cf 93       	push	r28
	for (uint8_t i = 0; i < (count + 14)/16; i++){
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	0e 96       	adiw	r24, 0x0e	; 14
 310:	8c 01       	movw	r16, r24
 312:	12 f4       	brpl	.+4      	; 0x318 <endframe+0x12>
 314:	01 5f       	subi	r16, 0xF1	; 241
 316:	1f 4f       	sbci	r17, 0xFF	; 255
 318:	15 95       	asr	r17
 31a:	07 95       	ror	r16
 31c:	15 95       	asr	r17
 31e:	07 95       	ror	r16
 320:	15 95       	asr	r17
 322:	07 95       	ror	r16
 324:	15 95       	asr	r17
 326:	07 95       	ror	r16
 328:	10 16       	cp	r1, r16
 32a:	11 06       	cpc	r1, r17
 32c:	54 f4       	brge	.+20     	; 0x342 <endframe+0x3c>
 32e:	c0 e0       	ldi	r28, 0x00	; 0
		bitbangbonanza(0);
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	0e 94 10 01 	call	0x220	; 0x220 <bitbangbonanza>
	bitbangbonanza(0);
	bitbangbonanza(0);
}

void endframe ( uint8_t count ){
	for (uint8_t i = 0; i < (count + 14)/16; i++){
 336:	cf 5f       	subi	r28, 0xFF	; 255
 338:	8c 2f       	mov	r24, r28
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	80 17       	cp	r24, r16
 33e:	91 07       	cpc	r25, r17
 340:	bc f3       	brlt	.-18     	; 0x330 <endframe+0x2a>
		bitbangbonanza(0);
	}
}
 342:	cf 91       	pop	r28
 344:	1f 91       	pop	r17
 346:	0f 91       	pop	r16
 348:	08 95       	ret

0000034a <pushframe>:
	APA_PORT.OUT = ( (val >> 0 & 1) << DATA_PIN ); // LSB of data
	APA_PORT.OUT |= (1 << CLK_PIN);
	APA_PORT.OUT &= ~(1 << CLK_PIN);
}

void pushframe(uint8_t framebuffer[][3], uint8_t brightness){
 34a:	ff 92       	push	r15
 34c:	0f 93       	push	r16
 34e:	1f 93       	push	r17
 350:	cf 93       	push	r28
 352:	df 93       	push	r29
 354:	8c 01       	movw	r16, r24
 356:	f6 2e       	mov	r15, r22
	startframe();
 358:	0e 94 76 01 	call	0x2ec	; 0x2ec <startframe>
 35c:	e8 01       	movw	r28, r16
 35e:	0a 50       	subi	r16, 0x0A	; 10
 360:	1f 4f       	sbci	r17, 0xFF	; 255
	for(uint8_t i=0; i<NUM_LEDS; i++){
		bitbangbonanza(0b11100000 | brightness); // Brightness
 362:	8f 2d       	mov	r24, r15
 364:	80 6e       	ori	r24, 0xE0	; 224
 366:	f8 2e       	mov	r15, r24
 368:	8f 2d       	mov	r24, r15
 36a:	0e 94 10 01 	call	0x220	; 0x220 <bitbangbonanza>
		bitbangbonanza(framebuffer[i][BLUE]); // B
 36e:	88 81       	ld	r24, Y
 370:	0e 94 10 01 	call	0x220	; 0x220 <bitbangbonanza>
		bitbangbonanza(framebuffer[i][GREEN]); // G
 374:	89 81       	ldd	r24, Y+1	; 0x01
 376:	0e 94 10 01 	call	0x220	; 0x220 <bitbangbonanza>
		bitbangbonanza(framebuffer[i][RED]); // R
 37a:	8a 81       	ldd	r24, Y+2	; 0x02
 37c:	0e 94 10 01 	call	0x220	; 0x220 <bitbangbonanza>
 380:	23 96       	adiw	r28, 0x03	; 3
	APA_PORT.OUT &= ~(1 << CLK_PIN);
}

void pushframe(uint8_t framebuffer[][3], uint8_t brightness){
	startframe();
	for(uint8_t i=0; i<NUM_LEDS; i++){
 382:	c0 17       	cp	r28, r16
 384:	d1 07       	cpc	r29, r17
 386:	81 f7       	brne	.-32     	; 0x368 <pushframe+0x1e>
		bitbangbonanza(0b11100000 | brightness); // Brightness
		bitbangbonanza(framebuffer[i][BLUE]); // B
		bitbangbonanza(framebuffer[i][GREEN]); // G
		bitbangbonanza(framebuffer[i][RED]); // R
	}
	endframe(NUM_LEDS);
 388:	82 e5       	ldi	r24, 0x52	; 82
 38a:	0e 94 83 01 	call	0x306	; 0x306 <endframe>
 38e:	df 91       	pop	r29
 390:	cf 91       	pop	r28
 392:	1f 91       	pop	r17
 394:	0f 91       	pop	r16
 396:	ff 90       	pop	r15
 398:	08 95       	ret

0000039a <setup>:
}

void setup ( void ) {
	// Select internal 32MHz Oscillator as clock source
	//OSC.CTRL = 0b001;
	NVM.CTRLB |= (1 << 3); // Set EEPROM to memory mapped access
 39a:	e0 ec       	ldi	r30, 0xC0	; 192
 39c:	f1 e0       	ldi	r31, 0x01	; 1
 39e:	84 85       	ldd	r24, Z+12	; 0x0c
 3a0:	88 60       	ori	r24, 0x08	; 8
 3a2:	84 87       	std	Z+12, r24	; 0x0c
 3a4:	08 95       	ret

000003a6 <fill>:

void clear(uint8_t framebuffer[][3]){
	fill(framebuffer, 0x00);
}

void fill(uint8_t framebuffer[][3], uint8_t val){
 3a6:	fc 01       	movw	r30, r24
 3a8:	8a 50       	subi	r24, 0x0A	; 10
 3aa:	9f 4f       	sbci	r25, 0xFF	; 255
	for(uint8_t j=0; j<NUM_LEDS; j++){
		for (uint8_t i=0; i<3; i++){
			framebuffer[j][i] = val;
 3ac:	60 83       	st	Z, r22
 3ae:	61 83       	std	Z+1, r22	; 0x01
 3b0:	62 83       	std	Z+2, r22	; 0x02
 3b2:	33 96       	adiw	r30, 0x03	; 3
void clear(uint8_t framebuffer[][3]){
	fill(framebuffer, 0x00);
}

void fill(uint8_t framebuffer[][3], uint8_t val){
	for(uint8_t j=0; j<NUM_LEDS; j++){
 3b4:	8e 17       	cp	r24, r30
 3b6:	9f 07       	cpc	r25, r31
 3b8:	c9 f7       	brne	.-14     	; 0x3ac <fill+0x6>
		for (uint8_t i=0; i<3; i++){
			framebuffer[j][i] = val;
		}
	}
}
 3ba:	08 95       	ret

000003bc <clear>:
	//OSC.CTRL = 0b001;
	NVM.CTRLB |= (1 << 3); // Set EEPROM to memory mapped access
}

void clear(uint8_t framebuffer[][3]){
	fill(framebuffer, 0x00);
 3bc:	60 e0       	ldi	r22, 0x00	; 0
 3be:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <fill>
 3c2:	08 95       	ret

000003c4 <main>:
void setup( void );
void clear(uint8_t framebuffer[][3]);
void fill(uint8_t framebuffer[][3], uint8_t val);

int main(void)
{
 3c4:	cf 93       	push	r28
 3c6:	df 93       	push	r29
 3c8:	cd b7       	in	r28, 0x3d	; 61
 3ca:	de b7       	in	r29, 0x3e	; 62
 3cc:	c6 5f       	subi	r28, 0xF6	; 246
 3ce:	d1 09       	sbc	r29, r1
 3d0:	cd bf       	out	0x3d, r28	; 61
 3d2:	de bf       	out	0x3e, r29	; 62
	setup();
 3d4:	0e 94 cd 01 	call	0x39a	; 0x39a <setup>
	setupapa();
 3d8:	0e 94 0a 01 	call	0x214	; 0x214 <setupapa>
	
	uint8_t framebuffer[NUM_LEDS][3];
	clear(framebuffer);
 3dc:	ce 01       	movw	r24, r28
 3de:	01 96       	adiw	r24, 0x01	; 1
 3e0:	0e 94 de 01 	call	0x3bc	; 0x3bc <clear>
	pushframe(framebuffer, 1);
 3e4:	61 e0       	ldi	r22, 0x01	; 1
 3e6:	ce 01       	movw	r24, r28
 3e8:	01 96       	adiw	r24, 0x01	; 1
 3ea:	0e 94 a5 01 	call	0x34a	; 0x34a <pushframe>
 3ee:	0f 2e       	mov	r0, r31
 3f0:	fc ee       	ldi	r31, 0xEC	; 236
 3f2:	cf 2e       	mov	r12, r31
 3f4:	f0 2d       	mov	r31, r0
			//clear(framebuffer);
			//for(uint8_t j=0; j<NUM_LEDS; j++){
			//	framebuffer[j][i] = 0x40;
			//}
			for(int i=0; i<NUM_LEDS; i++){
				framebuffer[(i/3)][i%3] = (eeprompointer + i);
 3f6:	0f 2e       	mov	r0, r31
 3f8:	f3 e0       	ldi	r31, 0x03	; 3
 3fa:	ef 2e       	mov	r14, r31
 3fc:	f1 2c       	mov	r15, r1
 3fe:	f0 2d       	mov	r31, r0
 400:	8e 01       	movw	r16, r28
 402:	0f 5f       	subi	r16, 0xFF	; 255
 404:	1f 4f       	sbci	r17, 0xFF	; 255
 406:	a0 2e       	mov	r10, r16
 408:	b1 2e       	mov	r11, r17
 40a:	0f 2e       	mov	r0, r31
 40c:	f4 e1       	ldi	r31, 0x14	; 20
 40e:	df 2e       	mov	r13, r31
 410:	f0 2d       	mov	r31, r0
 412:	dc 0c       	add	r13, r12
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 414:	2f e3       	ldi	r18, 0x3F	; 63
 416:	8d e0       	ldi	r24, 0x0D	; 13
 418:	93 e0       	ldi	r25, 0x03	; 3
 41a:	21 50       	subi	r18, 0x01	; 1
 41c:	80 40       	sbci	r24, 0x00	; 0
 41e:	90 40       	sbci	r25, 0x00	; 0
 420:	e1 f7       	brne	.-8      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 422:	00 c0       	rjmp	.+0      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 424:	00 00       	nop
 426:	4d 2d       	mov	r20, r13
			_delay_ms(1000);
			//clear(framebuffer);
			//for(uint8_t j=0; j<NUM_LEDS; j++){
			//	framebuffer[j][i] = 0x40;
			//}
			for(int i=0; i<NUM_LEDS; i++){
 428:	20 e0       	ldi	r18, 0x00	; 0
 42a:	30 e0       	ldi	r19, 0x00	; 0
				framebuffer[(i/3)][i%3] = (eeprompointer + i);
 42c:	c9 01       	movw	r24, r18
 42e:	b7 01       	movw	r22, r14
 430:	0e 94 37 02 	call	0x46e	; 0x46e <__divmodhi4>
 434:	fb 01       	movw	r30, r22
 436:	ee 0f       	add	r30, r30
 438:	ff 1f       	adc	r31, r31
 43a:	6e 0f       	add	r22, r30
 43c:	7f 1f       	adc	r23, r31
 43e:	60 0f       	add	r22, r16
 440:	71 1f       	adc	r23, r17
 442:	fb 01       	movw	r30, r22
 444:	e8 0f       	add	r30, r24
 446:	f9 1f       	adc	r31, r25
 448:	40 83       	st	Z, r20
			_delay_ms(1000);
			//clear(framebuffer);
			//for(uint8_t j=0; j<NUM_LEDS; j++){
			//	framebuffer[j][i] = 0x40;
			//}
			for(int i=0; i<NUM_LEDS; i++){
 44a:	2f 5f       	subi	r18, 0xFF	; 255
 44c:	3f 4f       	sbci	r19, 0xFF	; 255
 44e:	4e 5f       	subi	r20, 0xFE	; 254
 450:	22 35       	cpi	r18, 0x52	; 82
 452:	31 05       	cpc	r19, r1
 454:	59 f7       	brne	.-42     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
				framebuffer[(i/3)][i%3] = (eeprompointer + i);
			}
			pushframe(framebuffer, 1);
 456:	61 e0       	ldi	r22, 0x01	; 1
 458:	8a 2d       	mov	r24, r10
 45a:	9b 2d       	mov	r25, r11
 45c:	0e 94 a5 01 	call	0x34a	; 0x34a <pushframe>
 460:	24 ea       	ldi	r18, 0xA4	; 164
 462:	d2 0e       	add	r13, r18
	pushframe(framebuffer, 1);
	
	uint16_t * eeprompointer = MAPPED_EEPROM_START;
	
	while (1) {
		for(uint8_t i = 0; i<3; i++){
 464:	dc 10       	cpse	r13, r12
 466:	d6 cf       	rjmp	.-84     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 468:	8c ee       	ldi	r24, 0xEC	; 236
 46a:	c8 0e       	add	r12, r24
 46c:	ce cf       	rjmp	.-100    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>

0000046e <__divmodhi4>:
 46e:	97 fb       	bst	r25, 7
 470:	07 2e       	mov	r0, r23
 472:	16 f4       	brtc	.+4      	; 0x478 <__divmodhi4+0xa>
 474:	00 94       	com	r0
 476:	07 d0       	rcall	.+14     	; 0x486 <__divmodhi4_neg1>
 478:	77 fd       	sbrc	r23, 7
 47a:	09 d0       	rcall	.+18     	; 0x48e <__divmodhi4_neg2>
 47c:	0e 94 4b 02 	call	0x496	; 0x496 <__udivmodhi4>
 480:	07 fc       	sbrc	r0, 7
 482:	05 d0       	rcall	.+10     	; 0x48e <__divmodhi4_neg2>
 484:	3e f4       	brtc	.+14     	; 0x494 <__divmodhi4_exit>

00000486 <__divmodhi4_neg1>:
 486:	90 95       	com	r25
 488:	81 95       	neg	r24
 48a:	9f 4f       	sbci	r25, 0xFF	; 255
 48c:	08 95       	ret

0000048e <__divmodhi4_neg2>:
 48e:	70 95       	com	r23
 490:	61 95       	neg	r22
 492:	7f 4f       	sbci	r23, 0xFF	; 255

00000494 <__divmodhi4_exit>:
 494:	08 95       	ret

00000496 <__udivmodhi4>:
 496:	aa 1b       	sub	r26, r26
 498:	bb 1b       	sub	r27, r27
 49a:	51 e1       	ldi	r21, 0x11	; 17
 49c:	07 c0       	rjmp	.+14     	; 0x4ac <__udivmodhi4_ep>

0000049e <__udivmodhi4_loop>:
 49e:	aa 1f       	adc	r26, r26
 4a0:	bb 1f       	adc	r27, r27
 4a2:	a6 17       	cp	r26, r22
 4a4:	b7 07       	cpc	r27, r23
 4a6:	10 f0       	brcs	.+4      	; 0x4ac <__udivmodhi4_ep>
 4a8:	a6 1b       	sub	r26, r22
 4aa:	b7 0b       	sbc	r27, r23

000004ac <__udivmodhi4_ep>:
 4ac:	88 1f       	adc	r24, r24
 4ae:	99 1f       	adc	r25, r25
 4b0:	5a 95       	dec	r21
 4b2:	a9 f7       	brne	.-22     	; 0x49e <__udivmodhi4_loop>
 4b4:	80 95       	com	r24
 4b6:	90 95       	com	r25
 4b8:	bc 01       	movw	r22, r24
 4ba:	cd 01       	movw	r24, r26
 4bc:	08 95       	ret

000004be <_exit>:
 4be:	f8 94       	cli

000004c0 <__stop_program>:
 4c0:	ff cf       	rjmp	.-2      	; 0x4c0 <__stop_program>
